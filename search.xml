<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>阳光不燥，微风正好</title>
      <link href="/2022/10/27/%E7%94%9F%E6%B4%BB/%E7%94%9F%E6%B4%BB/"/>
      <url>/2022/10/27/%E7%94%9F%E6%B4%BB/%E7%94%9F%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="秋至"><a href="#秋至" class="headerlink" title="秋至"></a>秋至</h1><blockquote><p>一生的时间很短<br>  短到不过是两颗心之间的距离<br>  一生的时间也很长<br>  不如我们试着走走看</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见算法和Lambda</title>
      <link href="/2022/10/13/Java%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E5%92%8CLambda/"/>
      <url>/2022/10/13/Java%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E5%92%8CLambda/</url>
      
        <content type="html"><![CDATA[<h1 id="常见算法和Lambda"><a href="#常见算法和Lambda" class="headerlink" title="常见算法和Lambda"></a>常见算法和Lambda</h1><h2 id="一、常见算法"><a href="#一、常见算法" class="headerlink" title="一、常见算法"></a>一、常见算法</h2><h3 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h3><h4 id="1-基本查找"><a href="#1-基本查找" class="headerlink" title="1.基本查找"></a>1.基本查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A01_BasicSearchDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//基本查找/顺序查找</span></span><br><span class="line">        <span class="comment">//核心：</span></span><br><span class="line">        <span class="comment">//从0索引开始挨个往后查找</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//需求：定义一个方法利用基本查找，查找某个元素是否存在</span></span><br><span class="line">        <span class="comment">//数据如下：&#123;131, 127, 147, 81, 103, 23, 7, 79&#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">131</span>, <span class="number">127</span>, <span class="number">147</span>, <span class="number">81</span>, <span class="number">103</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">79</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">81</span>;</span><br><span class="line">        System.out.println(basicSearch(arr, number));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//参数：</span></span><br><span class="line">    <span class="comment">//一：数组</span></span><br><span class="line">    <span class="comment">//二：要查找的元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回值：</span></span><br><span class="line">    <span class="comment">//元素是否存在</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">basicSearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="comment">//利用基本查找来查找number在数组中是否存在</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-二分查找-折半查找"><a href="#2-二分查找-折半查找" class="headerlink" title="2.二分查找/折半查找"></a>2.二分查找/折半查找</h4><ul><li><p><strong>前提条件：数组中的数据必须是有序的</strong></p></li><li><p><strong>核心逻辑：每次排除一般的范围去查找</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02_BinarySearchDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//二分查找/折半查找</span></span><br><span class="line">        <span class="comment">//核心：</span></span><br><span class="line">        <span class="comment">//每次排除一半的查找范围</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//需求：定义一个方法利用二分查找，查询某个元素在数组中的索引</span></span><br><span class="line">        <span class="comment">//数据如下：&#123;7, 23, 79, 81, 103, 127, 131, 147&#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">7</span>, <span class="number">23</span>, <span class="number">79</span>, <span class="number">81</span>, <span class="number">103</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">147</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        System.out.println(binarySearch(arr, <span class="number">81</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="comment">//1.定义两个变量记录要查找的范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr.length -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.利用循环不断的去找要查找的数据</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(min &gt; max)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//3.找到min和max的中间位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (min+max)/<span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//4.拿着mid指向的元素跟要查找的元素进行比较</span></span><br><span class="line">            <span class="comment">//4.1 number在mid的左边</span></span><br><span class="line">            <span class="comment">//4.2 number在mid的右边</span></span><br><span class="line">            <span class="comment">//4.3 number跟mid指向的元素一样</span></span><br><span class="line">            <span class="keyword">if</span>(arr[mid] &gt; number)&#123;</span><br><span class="line">                max = mid -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &lt; number)&#123;</span><br><span class="line">                min = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>二分查找改进(插值查找):适合查找分布均匀的数据</strong></li></ul><blockquote><p>mid = min + (key-arr[min])/(arr[max]-arr[min]) * (max-min)</p></blockquote><h4 id="3-分块查找"><a href="#3-分块查找" class="headerlink" title="3.分块查找"></a>3.分块查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_BlockSearchDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">    分块查找</span></span><br><span class="line"><span class="comment">    核心思想：</span></span><br><span class="line"><span class="comment">    块内无序，块间有序</span></span><br><span class="line"><span class="comment">    实现步骤：</span></span><br><span class="line"><span class="comment">    1.创建数组blockArr存放每一个块对象的信息</span></span><br><span class="line"><span class="comment">    2.先查找blockArr确定要查找的数据属于哪一块</span></span><br><span class="line"><span class="comment">    3.再单独遍历这一块数据即可</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">16</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">21</span>, <span class="number">18</span>, </span><br><span class="line">                 <span class="number">32</span>, <span class="number">23</span>, <span class="number">37</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">34</span>, </span><br><span class="line">                 <span class="number">50</span>, <span class="number">48</span>, <span class="number">61</span>, <span class="number">52</span>, <span class="number">73</span>, <span class="number">66</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1.要把数据进行分块</span></span><br><span class="line">    <span class="comment">//要分为几块：  18  开根号 4.24块</span></span><br><span class="line">    <span class="comment">//创建三个块的对象</span></span><br><span class="line">    <span class="type">Block</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">21</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="type">Block</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">45</span>, <span class="number">6</span>, <span class="number">11</span>);</span><br><span class="line">    <span class="type">Block</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">73</span>, <span class="number">12</span>, <span class="number">17</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义数组用来管理三个对象（索引表）</span></span><br><span class="line">    Block[] blockArr =&#123;b1, b2, b3&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义一个变量用来记录要查找的元素</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用方法，传递索引表，数组，要查找的元素</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(blockArr, arr, number);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打印一下</span></span><br><span class="line">    System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//利用分块查找的原理，查询number的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Block[] blockArr, <span class="type">int</span>[] arr, <span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="comment">//1.确定number是在哪一块当中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexBlock</span> <span class="operator">=</span> findIndexBlock(blockArr, number);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (indexBlock == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//表示number不在数组当中</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取这一块的起始索引和结束索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> blockArr[indexBlock].getStartIndex();</span><br><span class="line">        <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> blockArr[indexBlock].getEndIndex();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= endIndex; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义一个方法，用来确定number在哪一块当中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findIndexBlock</span><span class="params">(Block[] blockArr, <span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="comment">//从0索引开始遍历blockArr, 如果number小于max, 那么就表示number是在这一块当中的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; blockArr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (number &lt;= blockArr[i].getMax())&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Block</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> max;<span class="comment">//最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> startIndex;<span class="comment">//开始索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> endIndex;<span class="comment">//结束索引</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">(<span class="type">int</span> max, <span class="type">int</span> startIndex, <span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> max</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMax</span><span class="params">(<span class="type">int</span> max)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> startIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStartIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartIndex</span><span class="params">(<span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> endIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEndIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndIndex</span><span class="params">(<span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Block&#123;max = &quot;</span> + max + <span class="string">&quot;, startIndex = &quot;</span> + startIndex + <span class="string">&quot;, endIndex = &quot;</span> + endIndex + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>扩展的分块查找（无规律的数据）</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_BlockSearchDemo02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">27</span>, <span class="number">22</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">36</span>, </span><br><span class="line">                 <span class="number">13</span>, <span class="number">19</span>, <span class="number">16</span>, <span class="number">20</span>,</span><br><span class="line">                 <span class="number">7</span>, <span class="number">10</span>,</span><br><span class="line">                     <span class="number">43</span>, <span class="number">50</span>, <span class="number">48</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Block</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">22</span>, <span class="number">40</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="type">Block</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">13</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="type">Block</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">7</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="type">Block</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">43</span>, <span class="number">50</span>, <span class="number">11</span>, <span class="number">13</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义数组用来管理四个对象（索引表）</span></span><br><span class="line">    Block[] blockArr =&#123;b1, b2, b3, b4&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义一个变量用来记录要查找的元素</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用方法，传递索引表，数组，要查找的元素</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(blockArr, arr, number);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打印一下</span></span><br><span class="line">    System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//利用分块查找的原理，查询number的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Block[] blockArr, <span class="type">int</span>[] arr, <span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="comment">//1.确定number是在哪一块当中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexBlock</span> <span class="operator">=</span> findIndexBlock(blockArr, number);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (indexBlock == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//表示number不在数组当中</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取这一块的起始索引和结束索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> blockArr[indexBlock].getStartIndex();</span><br><span class="line">        <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> blockArr[indexBlock].getEndIndex();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= endIndex; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义一个方法，用来确定number在哪一块当中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findIndexBlock</span><span class="params">(Block[] blockArr, <span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="comment">//从0索引开始遍历blockArr, 如果number大于min且小于max, 那么就表示number是在这一块当中的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; blockArr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (number &lt; blockArr[i].getMax() &amp;&amp; number &gt; blockArr[i].getMin())&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Block</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> min;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> max;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> startIndex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> endIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> max, <span class="type">int</span> startIndex, <span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.min = min;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> min</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMin</span><span class="params">(<span class="type">int</span> min)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.min = min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> max</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMax</span><span class="params">(<span class="type">int</span> max)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> startIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStartIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartIndex</span><span class="params">(<span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> endIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEndIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndIndex</span><span class="params">(<span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Block&#123;min = &quot;</span> + min + <span class="string">&quot;, max = &quot;</span> + max + <span class="string">&quot;, startIndex = &quot;</span> + startIndex + <span class="string">&quot;, endIndex = &quot;</span> + endIndex + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><ul><li><strong>冒泡排序：相邻的数据两两比较，小的放前面，大的放后面。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A01_BubbleDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        冒泡排序：</span></span><br><span class="line"><span class="comment">        核心思想：</span></span><br><span class="line"><span class="comment">        1.相邻的元素两两比较，小的放右边，大的放左边</span></span><br><span class="line"><span class="comment">        2.第一轮比较完毕之后，最大值就已经确定了，后面一轮就可以少循环一次，后面一次类推。</span></span><br><span class="line"><span class="comment">        3.如果数组中又n个数据，总共我们只要执行n-1轮的代码就可以</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.定义数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.利用冒泡排序将数组中数据排成1，2，3，4，5</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;arr.length-<span class="number">1</span>-i ; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><ul><li><strong>选择排序：从0索引开始，拿着每一个索引上的元素跟后面的元素一次比较，小的放前面，大的放后面，一次类推。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02_BubbleDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        选择排序：</span></span><br><span class="line"><span class="comment">        1.从0索引开始，跟后面的元素一一比较。</span></span><br><span class="line"><span class="comment">        2.小的放前面，大的放后面。</span></span><br><span class="line"><span class="comment">        3.第一次循环结束后，最小的数据已经确定。</span></span><br><span class="line"><span class="comment">        4.第二次循环从1索引开始以此类推。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//利用选择排序让数组变成1 2 3 4 5</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; arr.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[j])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><ul><li><p><strong>插入排序：将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素到最后一个当成是无序的。遍历无序的数据，将遍历的元素插入有序序列中适当的位置，如遇到相同数据，插在后面。</strong></p></li><li><p><strong>N的范围：0~最大索引</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_InsertDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        插入排序：</span></span><br><span class="line"><span class="comment">        将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素到最后一个当成是无序的。遍历无序的数据，将遍历的元素插入有序序列中适当的位置，如遇到相同数据，插在后面。</span></span><br><span class="line"><span class="comment">        N的范围：0~最大索引</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.找到无序的哪一组数据是从哪个索引开始的。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">                startIndex = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.遍历从startIndex开始到最后一个元素，依次得到无序的哪一组数据中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="comment">//问题：如何把遍历到的数据，插入到前面有序的这一组当中</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//记录当前要插入数据的索引</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;j &gt; <span class="number">0</span>;j--)&#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[j-<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">//交换位置</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">                    arr[j-<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><h5 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h5><ul><li><p><strong>递归指的是方法中调用方法本身的现象。</strong></p></li><li><p><strong>递归注意点：递归一定要有出口，否则就会出现内存溢出</strong></p></li><li>把一个复杂的问题层层转化为一个<strong>与原问题相似的规模较小</strong>的问题来求解。</li><li>递归策略只需<strong>少量的程序</strong>就可描述出解题过程所需要的多次重复计算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A04_RecursiconDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//需求：利用递归求1-100之间的和</span></span><br><span class="line">        <span class="comment">//100 + 99 + 98 + 97 + 96 ... + 2 + 1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//大问题拆解成小问题</span></span><br><span class="line">        <span class="comment">//1~100之间的和 = 100 + (1~99之间的和)</span></span><br><span class="line">        <span class="comment">//1~99之间的和 = 99 + (1~98之间的和)</span></span><br><span class="line">        <span class="comment">//1~98之间的和 = 98 + (1~97之间的和)</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="comment">//1~2之间的和 = 2 + (1~1之间的和)</span></span><br><span class="line">        <span class="comment">//1~1之间的和 = 1(递归的出口)</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(getSum(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果number不是1</span></span><br><span class="line">        <span class="keyword">return</span> number + getSum(number-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>递归求阶乘</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A04_RecursiconDemo02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        需求：用递归求5的阶乘，并把结果在控制台输出</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(getFactorialRecursion(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getFactorialRecursion</span><span class="params">(<span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> number * getFactorialRecursion(number-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>快速排序</strong></p><ul><li>第一轮：把0索引的数字作为基准数，确定基准数在数组中正确的位置。</li><li>比基准数小的全部在左边，比基准数大的全部在右边</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A05_QuickSortDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        快速排序:</span></span><br><span class="line"><span class="comment">        第一轮：把0索引的数字作为基准数，确定基准数在数组中正确的位置。</span></span><br><span class="line"><span class="comment">        比基准数小的全部在左边，比基准数大的全部在右边</span></span><br><span class="line"><span class="comment">        后面依次类推</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    参数一：我们要排序的数组</span></span><br><span class="line"><span class="comment">    参数二：要排序数组的起始索引</span></span><br><span class="line"><span class="comment">    参数三：要排序数组的结束索引</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="comment">//定义两个变量记录要查找的范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> j;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(start &gt; end)&#123;</span><br><span class="line"><span class="comment">//递归的出口</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//记录基准数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">baseNumber</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//利用循环找到要交换的数字</span></span><br><span class="line">        <span class="keyword">while</span>(start != end)&#123;</span><br><span class="line">            <span class="comment">//利用end, 从后往前开始找，找比基准数小的数字</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end &lt;= start || arr[end] &lt; baseNumber)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//利用start，从前往后找，找比基准大的数字</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end &lt;= start || arr[start] &gt; baseNumber)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把end和start指向的元素进行交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//当start和end指向了同一个元素的时候，那么上面的循环就会结束</span></span><br><span class="line">        <span class="comment">//表示已经找到了基准数在数组中应存入的位置</span></span><br><span class="line">        <span class="comment">//基准数归位</span></span><br><span class="line">        <span class="comment">//就是拿着这个范围中的第一个数字，跟start指向的元素进行交换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[start];</span><br><span class="line">        arr[start] = temp;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//确定6左边的范围，重复刚刚所做的事情</span></span><br><span class="line">        quickSort(arr, i, start-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//确定6右边的范围，重复刚刚所做的事情</span></span><br><span class="line">        quickSort(arr, start+<span class="number">1</span>, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、Arrays"><a href="#二、Arrays" class="headerlink" title="二、Arrays"></a>二、Arrays</h2><p><strong>操作数组的工具类</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>public static String toString(数组)</code></td><td style="text-align:center">把数组拼接成一个字符串</td></tr><tr><td style="text-align:center"><code>public static int binarySearch(数组，查找的元素)</code></td><td style="text-align:center">二分查找法查找元素</td></tr><tr><td style="text-align:center"><code>public static int[] copyOf(原数组，新数组长度)</code></td><td style="text-align:center">拷贝数组</td></tr><tr><td style="text-align:center"><code>public static int[] copyOfRange(原数组，起始值，结束索引)</code></td><td style="text-align:center">拷贝数组（指定范围）</td></tr><tr><td style="text-align:center"><code>public static void fill(数组，元素)</code></td><td style="text-align:center">填充数组</td></tr><tr><td style="text-align:center"><code>public static void sort(数组)</code></td><td style="text-align:center">按照默认方式进行数组排序</td></tr><tr><td style="text-align:center"><code>public static void sort(数组，排序规则)</code></td><td style="text-align:center">按照指定的规则排序</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArraysDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public static void sort(数组，排序规则)按照指定的规则排序</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        参数一：要排序的数组</span></span><br><span class="line"><span class="comment">        参数二：排序的规则</span></span><br><span class="line"><span class="comment">        细节：</span></span><br><span class="line"><span class="comment">        只能给引用数据类型的数组进行排序</span></span><br><span class="line"><span class="comment">        如果数组是基本数据类型的，需要变成其对于的包装类</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        Integer[] arr = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第二个参数是一个接口，所以我们在调用方法的时候，需要传递这个接口的实现类对象，作为排序的规则。</span></span><br><span class="line">        <span class="comment">//但是这个实现类，我只使用一次，所以就没有必要单独的去写一个类，直接采取匿名内部类的方式就可以了</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//底层原理：</span></span><br><span class="line">        <span class="comment">//利用插入排序 + 二分查找的方式进行排序的。</span></span><br><span class="line">        <span class="comment">//默认把0索引的数据当做是有序的序列，1索引到最后认为是无序的序列。</span></span><br><span class="line">        <span class="comment">//遍历无序的序列得到里面的每一个元素，假设当前遍历得到的元素是A元素</span></span><br><span class="line">        <span class="comment">//把A往有序序列中进行插入，在插入的时候，是利用二分查找确定A元素的插入点</span></span><br><span class="line">        <span class="comment">//拿着A元素，跟插入点的元素进行比较，比较的规则就是compare方法的方法体</span></span><br><span class="line">        <span class="comment">//如果方法的返回值是负数，拿着A继续跟前面的数据进行比较</span></span><br><span class="line">        <span class="comment">//如果方法的返回值是正数，拿着A继续跟后面的数据进行比表</span></span><br><span class="line">        <span class="comment">//如果方法的返回值是0，也拿着A跟后面的数据进行比较</span></span><br><span class="line">        <span class="comment">//直到能确定A的最终位置为止。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//compare方法的形式参数：</span></span><br><span class="line">        <span class="comment">//参数一o1：表示在无序序列中，遍历得到的每一个元素</span></span><br><span class="line">        <span class="comment">//参数二o2：有序序列中的元素</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//返回值：</span></span><br><span class="line">        <span class="comment">//负数：表示当前要插入的元素是小的，放在前面</span></span><br><span class="line">        <span class="comment">//正数：表示当前要插入的元素是大的，放在后面</span></span><br><span class="line">        <span class="comment">//0：表示当前要插入的元素跟现在的元素比是一样的我们也会放在后面</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//简单理解：</span></span><br><span class="line">        <span class="comment">//o1 - o2 : 升序排列</span></span><br><span class="line">        <span class="comment">//o2 - o1 : 降序排列</span></span><br><span class="line">        </span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;o1:&quot;</span>+o1);</span><br><span class="line">                System.out.println(<span class="string">&quot;o2:&quot;</span>+o2);</span><br><span class="line">                <span class="keyword">return</span> o1-o2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Lambda表达式"><a href="#三、Lambda表达式" class="headerlink" title="三、Lambda表达式"></a>三、Lambda表达式</h2><p><strong>试爽一下Lambda表达式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//初始lambda表达式</span></span><br><span class="line">        Integer[] arr = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*Arrays.sort(arr, new Comparator&lt;Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public int compare(Integer o1, Integer o2)&#123;</span></span><br><span class="line"><span class="comment">                return o1-o2;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr, (Integer o1, Integer o2) -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> o1-o2;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数式编程</strong></p><ul><li>函数式编程是一种思想特点。<ul><li>函数式编程思想，忽略面向对象的复杂语法，强调做什么，而不是谁去做。</li></ul></li><li>面向对象：先找对象，让对象做事情。</li></ul><p><strong>Lambda表达式的标准格式</strong></p><ul><li>Lambda表达式时JDK8开始后的一种新语法形式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">()-&gt;&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>()</code>对应着方法的形参</li><li><code>-&gt;</code> 固定格式</li><li><code>&#123;&#125;</code>对应着方法的方法体</li></ul><p><strong>注意点：</strong></p><ul><li>Lambda表达式可以用来简化匿名内部类的书写</li><li>Lambda表达式只能简化函数式接口的匿名内部类的写法</li><li>函数式接口：<ul><li>有且仅有一个抽象方法的接口叫做函数式接口，接口上方可以加<code>@FunctionalInterface</code>注解</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo02</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//1.利用匿名内部类的形式去调用下面的方法</span></span><br><span class="line">        <span class="comment">//调用一个方法的时候，如果方法的形参是一个接口，那么我们要传递这个接口的实现类对象</span></span><br><span class="line">        <span class="comment">//如果实现类对象只要用到一次，就可以用匿名内部类的形式进行书写</span></span><br><span class="line">        </span><br><span class="line">        method(<span class="keyword">new</span> <span class="title class_">Swim</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;正在游泳~~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.利用lambda表达式进行改写</span></span><br><span class="line">        method(</span><br><span class="line">                ()-&gt;&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;正在游泳~~&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Swim s)</span>&#123;</span><br><span class="line">        s.swimming();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Swim</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Lambda表达式的省略写法(省略核心：可推到，可省略)</strong></p><ul><li>参数类型可以省略不写。</li><li>如果只有一个参数，参数类型可以省略，同时()也可以省略。</li><li>如果Lambda表达式的方法体只有一行，<strong>大括号，分号，return</strong>可以省略不写，需要<strong>同时省略</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo03</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        `lambda的省略规则：</span></span><br><span class="line"><span class="comment">        1.参数类型可以省略不写。</span></span><br><span class="line"><span class="comment">        2.如果只有一个参数，参数类型可以省略，同时()也可以省略。</span></span><br><span class="line"><span class="comment">        3.如果Lambda表达式的方法体只有一行，大括号，分号，return可以省略不写，需要同时省略。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        Integer[] arr = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1,Integer o2)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1 - o2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//lambda完整格式</span></span><br><span class="line">        Arrays.sort(arr, (Integer o1,Integer o2)-&gt;&#123;</span><br><span class="line">                <span class="keyword">return</span> o1 - o2;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//lambda省略写法</span></span><br><span class="line">        Arrays.sort(arr, (o1, o2)-&gt; o1 - o2);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习：Lambda表达式简化Comparator接口的匿名形式</strong></p><p>定义数组并存储一些字符串，利用Arrays中的sort方法进行排序</p><p>要求：</p><p>按照字符串的长度进行排序，短的在前面，长的在后面。</p><p>（暂时不比较字符串里面的内容）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaDemo04</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义数组并存储一些字符串，利用Arrays中的sort方法进行排序</span></span><br><span class="line"><span class="comment">        要求：</span></span><br><span class="line"><span class="comment">        按照字符串的长度进行排序，短的在前面，长的在后面。</span></span><br><span class="line"><span class="comment">        （暂时不比较字符串里面的内容）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;aa&quot;</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果以后我们要把数组中的数据按照指定的方式进行排序，就需要用到sort方法，而且要指定排序的规则</span></span><br><span class="line">        <span class="comment">/*Arrays.sort(arr, new Comparator&lt;String&gt;()&#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public int compare(String o1, String o2)&#123;</span></span><br><span class="line"><span class="comment">                //字符串的长度进行排序</span></span><br><span class="line"><span class="comment">                return o1.length() - o2.length();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Lambda完整格式</span></span><br><span class="line">        <span class="comment">/*Arrays.sort(arr, (String o1, String o2)-&gt;&#123;</span></span><br><span class="line"><span class="comment">                return o1.length() - o2.length();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        );*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Lambda简写格式</span></span><br><span class="line">        Arrays.sort(arr, (o1, o2)-&gt; o1.length() - o2.length());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、综合练习"><a href="#四、综合练习" class="headerlink" title="四、综合练习"></a>四、综合练习</h2><h3 id="按照要求进行排序"><a href="#按照要求进行排序" class="headerlink" title="按照要求进行排序"></a>按照要求进行排序</h3><p>定义数组并存储一些女朋友对象，利用Arrays中的sort方法进行排序</p><p>要求1：属性有姓名、年龄、身高。</p><p>要求2：按照年龄的大小进行排序，年龄一样，按照身高排序，身高一样按照姓名的字母进行排序。</p><p>（姓名中不要有中文或特殊字符，会涉及到后面的知识）</p><p><strong>提示：</strong>可以用<code>compareTo()</code>方法来进行字符串的比较</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s1.compareTo(s2);</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义数组并存储一些女朋友对象，利用Arrays中的sort方法进行排序</span></span><br><span class="line"><span class="comment">        要求1：属性有姓名、年龄、身高。</span></span><br><span class="line"><span class="comment">        要求2：按照年龄的大小进行排序，年龄一样，按照身高排序，身高一样按照姓名的字母进行排序。</span></span><br><span class="line"><span class="comment">        （姓名中不要有中文或特殊字符，会涉及到后面的知识）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.创建三个女朋友的对象</span></span><br><span class="line">        <span class="type">GirlFried</span> <span class="variable">gf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFried</span>(<span class="string">&quot;xiaoshishi&quot;</span>,<span class="number">18</span>,<span class="number">1.67</span>);</span><br><span class="line">    <span class="type">GirlFried</span> <span class="variable">gf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFried</span>(<span class="string">&quot;xiaodandan&quot;</span>,<span class="number">19</span>,<span class="number">1.72</span>);</span><br><span class="line">        <span class="type">GirlFried</span> <span class="variable">gf3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFried</span>(<span class="string">&quot;xiaohuihui&quot;</span>,<span class="number">19</span>,<span class="number">1.78</span>);</span><br><span class="line">        <span class="type">GirlFried</span> <span class="variable">gf4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFried</span>(<span class="string">&quot;abc&quot;</span>,<span class="number">19</span>,<span class="number">1.78</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.定义数组存储女朋友的信息</span></span><br><span class="line">        GirlFried[] arr = &#123;gf1, gf2, gf3, gf4&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.利用Arrays中的sort方法进行排序</span></span><br><span class="line">        <span class="comment">//匿名内部类  lambda表达式</span></span><br><span class="line">        <span class="comment">/*Arrays.sort(arr, new Comparator&lt;GirlFried&gt;()&#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public int compare(GirlFried o1, GirlFried o2)&#123;</span></span><br><span class="line"><span class="comment">                //按照年龄的大小进行排序，年龄一样，按照身高排序，身高一样按照姓名的字母进行排序。</span></span><br><span class="line"><span class="comment">                double temp = o1.getAge() - o2.getAge();</span></span><br><span class="line"><span class="comment">                temp = temp == 0 ? o1.getHeight() - o2.getHeight() : temp;</span></span><br><span class="line"><span class="comment">                temp = temp == 0 ? o1.getName().compareTo(o2.getName()) : temp;</span></span><br><span class="line"><span class="comment">                </span></span><br><span class="line"><span class="comment">                if(temp &gt; 0)&#123;</span></span><br><span class="line"><span class="comment">                    return 1;</span></span><br><span class="line"><span class="comment">                &#125;else if (temp &lt; 0)&#123;</span></span><br><span class="line"><span class="comment">                    return -1;</span></span><br><span class="line"><span class="comment">                &#125;else&#123;</span></span><br><span class="line"><span class="comment">                    return 0;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//lambda表达式</span></span><br><span class="line">        Arrays.sort(arr, (o1, o2)-&gt;&#123;</span><br><span class="line">                <span class="comment">//按照年龄的大小进行排序，年龄一样，按照身高排序，身高一样按照姓名的字母进行排序。</span></span><br><span class="line">                <span class="type">double</span> <span class="variable">temp</span> <span class="operator">=</span> o1.getAge() - o2.getAge();</span><br><span class="line">                temp = temp == <span class="number">0</span> ? o1.getHeight() - o2.getHeight() : temp;</span><br><span class="line">                temp = temp == <span class="number">0</span> ? o1.getName().compareTo(o2.getName()) : temp;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(temp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (temp &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.展示一下数组中的内容</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GirlFried</span>&#123;</span><br><span class="line">    <span class="comment">//要求1：属性姓名、年龄、身高。</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GirlFried</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GirlFried</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> height</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(<span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GirlFried&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;, height = &quot;</span> + height + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不死神兔"><a href="#不死神兔" class="headerlink" title="不死神兔"></a>不死神兔</h3><p>有一个很有名的数学逻辑题叫做不死神兔问题，有一对兔子，从出生后第三个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问第十二个月的兔子对数为多少？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        有一个很有名的数学逻辑题叫做不死神兔问题，有一对兔子，从出生后第三个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问第十二个月的兔子对数为多少？</span></span><br><span class="line"><span class="comment">        1月：1</span></span><br><span class="line"><span class="comment">        2月：1</span></span><br><span class="line"><span class="comment">        3月：2</span></span><br><span class="line"><span class="comment">        4月：3</span></span><br><span class="line"><span class="comment">        5月：5</span></span><br><span class="line"><span class="comment">        6月：8</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        特点：从第三个数据开始，时前两个数据和（斐波那契数列）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//求解1：</span></span><br><span class="line">        <span class="comment">//1.创建一个长度为12的数组</span></span><br><span class="line">        <span class="comment">/*int[] arr = new int[12];</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        //2.可以手动给0索引和1索引的数量进行赋值</span></span><br><span class="line"><span class="comment">        arr[0] = 1;</span></span><br><span class="line"><span class="comment">        arr[1] = 1;</span></span><br><span class="line"><span class="comment">        //3.利用循环给剩余的数据进行赋值</span></span><br><span class="line"><span class="comment">        for (int i = 2; i &lt; arr.length; i++)&#123;</span></span><br><span class="line"><span class="comment">            arr[i] = arr[i-1] + arr[i-2];</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //4.获取最大索引上的数据即可</span></span><br><span class="line"><span class="comment">        System.out.println(arr[11]);*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//求解2:</span></span><br><span class="line">        <span class="comment">//递归的方式完成</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(getSum(<span class="number">12</span>));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> month)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(month==<span class="number">1</span>||month==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getSum(month-<span class="number">1</span>) + getSum(month-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="猴子吃桃子"><a href="#猴子吃桃子" class="headerlink" title="猴子吃桃子"></a>猴子吃桃子</h3><p>有一堆桃子，猴子第一天吃了其中的一半，并多吃了一个！以后每天猴子都吃当前剩下来的一半，然后再多吃一个，第10天的时候（还没吃），发现只剩一个桃子了，请问，最初总共有多少个桃子？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        有一堆桃子，猴子第一天吃了其中的一半，并多吃了一个！以后每天猴子都吃当前剩下来的一半，然后再多吃一个，第10天的时候（还没吃），发现只剩一个桃子了，请问，最初总共有多少个桃子？</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(getCount(<span class="number">1</span>));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">(<span class="type">int</span> day)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(day&lt;=<span class="number">0</span> || day&gt;=<span class="number">11</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前时间错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (day==<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (getCount(day+<span class="number">1</span>)+<span class="number">1</span>)*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h3><p>可爱的小明特别喜欢爬楼梯，他有的时候一次爬一个台阶，有的时候一次爬两个台阶。</p><p>如果这个楼梯有20个台阶，小明一共有多少中爬法呢？</p><p>运算结果：</p><p>1层台阶   1种爬法</p><p>2层台阶   2种爬法</p><p>7层台阶   21种爬法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        可爱的小明特别喜欢爬楼梯，他有的时候一次爬一个台阶，有的时候一次爬两个台阶。</span></span><br><span class="line"><span class="comment">        如果这个楼梯有20个台阶，小明一共有多少中爬法呢？</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(getCount(<span class="number">20</span>));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getCount(n-<span class="number">1</span>) + getCount(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        可爱的小明特别喜欢爬楼梯，他有的时候一次爬一个台阶，有的时候一次爬两个台阶，有的时候一次爬三个台阶。</span></span><br><span class="line"><span class="comment">        如果这个楼梯有20个台阶，小明一共有多少中爬法呢？</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        运算结果：</span></span><br><span class="line"><span class="comment">        1层台阶   1种爬法</span></span><br><span class="line"><span class="comment">        2层台阶   2种爬法</span></span><br><span class="line"><span class="comment">        3层台阶   4种爬法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(getCount(<span class="number">20</span>));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getCount(n-<span class="number">1</span>) + getCount(n-<span class="number">2</span>) + getCount(n-<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"boyFriend`Blog","short_name":"Deon","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* 鼠标图标 */  body {    cursor: url("/img/x1.cur"), auto;  }  a,  [type="button"]:not(:disabled),  [type="reset"]:not(:disabled),  [type="submit"]:not(:disabled),  button:not(:disabled) {    cursor: url("/img/x2.cur"), auto !important;  }  /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var t=new Date("10/10/2022 00:00:00");now.setTime(now.getTime()+250);var e=(now-t)/1e3/60/60/24,a=Math.floor(e),n=(now-t)/1e3/60/60-24*a,r=Math.floor(n);1==String(r).length&&(r="0"+r);var s=(now-t)/1e3/60-1440*a-60*r,i=Math.floor(s);1==String(i).length&&(i="0"+i);var o=(now-t)/1e3-86400*a-3600*r-60*i,l=Math.round(o);1==String(l).length&&(l="0"+l);let g="";g=r<18&&r>=9?`<img class="boardsign" src="https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安知鱼-上班摸鱼中.svg" title="距离月入25k也就还差一个大佬带我~"><span class="textTip"> <br> 本站居然运行了 ${a} 天</span><span id="runtime"> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class="fas fa-heartbeat" style="color:red"></i>`:`<img class="boardsign" src="https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安知鱼-下班啦.svg" title="下班了就该开开心心的玩耍，嘿嘿~"><span class="textTip"> <br> 本站居然运行了 ${a} 天</span><span id="runtime"> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class="fas fa-heartbeat" style="color:red"></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=g)}setInterval((()=>{createtime()}),250);</18&&r>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/coin/coin.js"/>
      <url>/js/coin/coin.js</url>
      
        <content type="html"><![CDATA[var tipButtons = document.querySelectorAll(".tip-button");function coinAudio() {  var coinAudio = document.getElementById("coinAudio");  if (coinAudio) {    coinAudio.play(); //有音频时播放  }}// Loop through all buttons (allows for multiple buttons on page)tipButtons.forEach(button => {  var coin = button.querySelector(".coin");  // The larger the number, the slower the animation  coin.maxMoveLoopCount = 90;  button.addEventListener("click", () => {    if (/Android|webOS|BlackBerry/i.test(navigator.userAgent)) return true; //媒体选择    if (button.clicked) return;    button.classList.add("clicked");    // Wait to start flipping th coin because of the button tilt animation    setTimeout(() => {      // Randomize the flipping speeds just for fun      coin.sideRotationCount = Math.floor(Math.random() * 5) * 90;      coin.maxFlipAngle = (Math.floor(Math.random() * 4) + 3) * Math.PI;      button.clicked = true;      flipCoin();      coinAudio();    }, 50);  });  var flipCoin = () => {    coin.moveLoopCount = 0;    flipCoinLoop();  };  var resetCoin = () => {    coin.style.setProperty("--coin-x-multiplier", 0);    coin.style.setProperty("--coin-scale-multiplier", 0);    coin.style.setProperty("--coin-rotation-multiplier", 0);    coin.style.setProperty("--shine-opacity-multiplier", 0.4);    coin.style.setProperty("--shine-bg-multiplier", "50%");    coin.style.setProperty("opacity", 1);    // Delay to give the reset animation some time before you can click again    setTimeout(() => {      button.clicked = false;    }, 300);  };  var flipCoinLoop = () => {    coin.moveLoopCount++;    var percentageCompleted = coin.moveLoopCount / coin.maxMoveLoopCount;    coin.angle = -coin.maxFlipAngle * Math.pow(percentageCompleted - 1, 2) + coin.maxFlipAngle;    // Calculate the scale and position of the coin moving through the air    coin.style.setProperty("--coin-y-multiplier", -11 * Math.pow(percentageCompleted * 2 - 1, 4) + 11);    coin.style.setProperty("--coin-x-multiplier", percentageCompleted);    coin.style.setProperty("--coin-scale-multiplier", percentageCompleted * 0.6);    coin.style.setProperty("--coin-rotation-multiplier", percentageCompleted * coin.sideRotationCount);    // Calculate the scale and position values for the different coin faces    // The math uses sin/cos wave functions to similate the circular motion of 3D spin    coin.style.setProperty("--front-scale-multiplier", Math.max(Math.cos(coin.angle), 0));    coin.style.setProperty("--front-y-multiplier", Math.sin(coin.angle));    coin.style.setProperty("--middle-scale-multiplier", Math.abs(Math.cos(coin.angle), 0));    coin.style.setProperty("--middle-y-multiplier", Math.cos((coin.angle + Math.PI / 2) % Math.PI));    coin.style.setProperty("--back-scale-multiplier", Math.max(Math.cos(coin.angle - Math.PI), 0));    coin.style.setProperty("--back-y-multiplier", Math.sin(coin.angle - Math.PI));    coin.style.setProperty("--shine-opacity-multiplier", 4 * Math.sin((coin.angle + Math.PI / 2) % Math.PI) - 3.2);    coin.style.setProperty("--shine-bg-multiplier", -40 * (Math.cos((coin.angle + Math.PI / 2) % Math.PI) - 0.5) + "%");    // Repeat animation loop    if (coin.moveLoopCount < coin.maxMoveLoopCount) {      if (coin.moveLoopCount === coin.maxMoveLoopCount - 6) button.classList.add("shrink-landing");      window.requestAnimationFrame(flipCoinLoop);    } else {      button.classList.add("coin-landed");      coin.style.setProperty("opacity", 0);      setTimeout(() => {        button.classList.remove("clicked", "shrink-landing", "coin-landed");        setTimeout(() => {          resetCoin();        }, 300);      }, 1500);    }  };});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.min.js"/>
      <url>/js/runtime/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var t=new Date("10/10/2022 00:00:00");now.setTime(now.getTime()+250);var e=(now-t)/1e3/60/60/24,a=Math.floor(e),n=(now-t)/1e3/60/60-24*a,r=Math.floor(n);1==String(r).length&&(r="0"+r);var s=(now-t)/1e3/60-1440*a-60*r,i=Math.floor(s);1==String(i).length&&(i="0"+i);var o=(now-t)/1e3-86400*a-3600*r-60*i,l=Math.round(o);1==String(l).length&&(l="0"+l);let g="";g=r<18&&r>=9?`<img class="boardsign" src="https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安知鱼-上班摸鱼中.svg" title="距离月入25k也就还差一个大佬带我~"><span class="textTip"> <br> 本站居然运行了 ${a} 天</span><span id="runtime"> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class="fas fa-heartbeat" style="color:red"></i>`:`<img class="boardsign" src="https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安知鱼-下班啦.svg" title="下班了就该开开心心的玩耍，嘿嘿~"><span class="textTip"> <br> 本站居然运行了 ${a} 天</span><span id="runtime"> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class="fas fa-heartbeat" style="color:red"></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=g)}setInterval(()=>{createtime()},250);</18&&r>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/coin/coin.css"/>
      <url>/css/coin/coin.css</url>
      
        <content type="html"><![CDATA[.tip-button {    border: 0;    border-radius: 0.25rem;    cursor: pointer;    font-size: 20px;    font-weight: 600;    height: 2.6rem;    margin-bottom: -4rem;    outline: 0;    position: relative;    top: 0;    transform-origin: 0% 100%;    transition: transform 50ms ease-in-out;    width: auto;    -webkit-tap-highlight-color: transparent;  }  .tip-button:active {    transform: rotate(4deg);  }  .tip-button.clicked {    animation: 150ms ease-in-out 1 shake;    pointer-events: none;  }  .tip-button.clicked .tip-button__text {    opacity: 0;    transition: opacity 100ms linear 200ms;  }  .tip-button.clicked::before {    height: 0.5rem;    width: 60%;    background: button-hover-color;  }  .tip-button.clicked .coin {    transition: margin-bottom 1s linear 200ms;    margin-bottom: 0;  }  .tip-button.shrink-landing::before {    transition: width 200ms ease-in;    width: 0;  }  .tip-button.coin-landed::after {    opacity: 1;    transform: scale(1);    transform-origin: 50% 100%;  }  .tip-button.coin-landed .coin-wrapper {    background: radial-gradient(circle at 35% 97%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(        circle at 45% 92%,        rgba(3, 16, 50, 0.4) 0.04rem,        transparent 0.02rem      ), radial-gradient(circle at 55% 98%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at          65% 96%, rgba(3, 16, 50, 0.4) 0.06rem, transparent 0.06rem);    background-position: center bottom;    background-size: 100%;    bottom: -1rem;    opacity: 0;    transform: scale(2) translateY(-10px);  }  .tip-button__text {    color: #fff;    margin-right: 1.8rem;    opacity: 1;    position: relative;    transition: opacity 100ms linear 500ms;    z-index: 3;  }  .tip-button::before {    border-radius: 0.25rem;    bottom: 0;    content: "";    display: block;    height: 100%;    left: 50%;    position: absolute;    transform: translateX(-50%);    transition: height 250ms ease-in-out 400ms, width 250ms ease-in-out 300ms;    width: 100%;    z-index: 2;  }  .tip-button::after {    bottom: -1rem;    color: white;    content: "ヾ(≧O≦)〃嗷~"; /*点击后显示的内容*/    height: 110%;    left: 0;    opacity: 0;    position: absolute;    pointer-events: none;    text-align: center;    transform: scale(0);    transform-origin: 50% 20%;    transition: transform 200ms cubic-bezier(0, 0, 0.35, 1.43);    width: 100%;    z-index: 1;  }    .coin-wrapper {    background: none;    bottom: 0;    height: 18rem;    left: 0;    opacity: 1;    overflow: hidden;    pointer-events: none;    position: absolute;    transform: none;    transform-origin: 50% 100%;    transition: opacity 200ms linear 100ms, transform 300ms ease-out;    width: 100%;  }    .coin {    --front-y-multiplier: 0;    --back-y-multiplier: 0;    --coin-y-multiplier: 0;    --coin-x-multiplier: 0;    --coin-scale-multiplier: 0;    --coin-rotation-multiplier: 0;    --shine-opacity-multiplier: 0.4;    --shine-bg-multiplier: 50%;    bottom: calc(var(--coin-y-multiplier) * 1rem - 3.5rem);    height: 3.5rem;    margin-bottom: 3.05rem;    position: absolute;    right: calc(var(--coin-x-multiplier) * 34% + 16%);    transform: translateX(50%) scale(calc(0.4 + var(--coin-scale-multiplier))) rotate(calc(var(              --coin-rotation-multiplier            ) * -1deg));    transition: opacity 100ms linear 200ms;    width: 3.5rem;    z-index: 3;  }  .coin__front,  .coin__middle,  .coin__back,  .coin::before,  .coin__front::after,  .coin__back::after {    border-radius: 50%;    box-sizing: border-box;    height: 100%;    left: 0;    position: absolute;    width: 100%;    z-index: 3;  }  .coin__front {    background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),      linear-gradient(210deg, #8590b3 32%, transparent 32%), linear-gradient(150deg, #8590b3 32%, transparent 32%),      linear-gradient(to right, #8590b3 22%, transparent 22%, transparent 78%, #8590b3 78%), linear-gradient(        to bottom,        #fcfaf9 44%,        transparent 44%,        transparent 65%,        #fcfaf9 65%,        #fcfaf9 71%,        #8590b3 71%      ), linear-gradient(to right, transparent 28%, #fcfaf9 28%, #fcfaf9 34%, #8590b3 34%, #8590b3 40%, #fcfaf9 40%, #fcfaf9          47%, #8590b3 47%, #8590b3 53%, #fcfaf9 53%, #fcfaf9 60%, #8590b3 60%, #8590b3 66%, #fcfaf9 66%, #fcfaf9 72%, transparent          72%);    background-color: #8590b3;    background-size: 100% 100%;    transform: translateY(calc(var(--front-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--front-scale-multiplier));  }  .coin__front::after {    background: rgba(0, 0, 0, 0.2);    content: "";    opacity: var(--front-y-multiplier);  }  .coin__middle {    background: #737c99;    transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--middle-scale-multiplier));  }  .coin__back {    background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),      radial-gradient(circle at 50% 40%, #fcfaf9 23%, transparent 23%), radial-gradient(circle at 50% 100%, #fcfaf9 35%, transparent          35%);    background-color: #8590b3;    background-size: 100% 100%;    transform: translateY(calc(var(--back-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--back-scale-multiplier));  }  .coin__back::after {    background: rgba(0, 0, 0, 0.2);    content: "";    opacity: var(--back-y-multiplier);  }  .coin::before {    background: radial-gradient(circle at 25% 65%, transparent 50%, rgba(255, 255, 255, 0.9) 90%), linear-gradient(55deg, transparent          calc(var(--shine-bg-multiplier) + 0%), #e9f4ff calc(var(--shine-bg-multiplier) + 0%), transparent calc(var(                --shine-bg-multiplier              ) + 50%));    content: "";    opacity: var(--shine-opacity-multiplier);    transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / -2)) scaleY(var(--middle-scale-multiplier))      rotate(calc(var(--coin-rotation-multiplier) * 1deg));    z-index: 10;  }  .coin::after {    background: #737c99;    content: "";    height: 0.3181818182rem;    left: 0;    position: absolute;    top: 50%;    transform: translateY(-50%);    width: 100%;    z-index: 2;  }    @keyframes shake {    0% {      transform: rotate(4deg);    }    66% {      transform: rotate(-4deg);    }    100% {      transform: rotate();    }  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[window._iconfont_svg_string_3738452 = '<svg><symbol id="icon-xinfeng" viewbox="0 0 1024 1024"><path d="M829.64898 805.093878H194.35102c-43.885714 0-79.412245-35.526531-79.412244-79.412245V298.840816C114.938776 254.955102 150.465306 219.428571 194.35102 219.428571h635.29796c43.885714 0 79.412245 35.526531 79.412244 79.412245v426.840817c0 43.363265-35.526531 79.412245-79.412244 79.412245z" fill="#DCF3F9"/><path d="M829.64898 218.906122H194.35102c-43.885714 0-79.412245 35.526531-79.412244 79.412245v426.840817c0 43.885714 35.526531 79.412245 79.412244 79.412245h635.29796c43.885714 0 79.412245-35.526531 79.412244-79.412245V298.318367c0-43.363265-35.526531-79.412245-79.412244-79.412245z m0 40.228572c2.089796 0 3.657143 0 5.746938 0.522449l-295.183673 295.183673c-15.673469 15.673469-40.75102 15.673469-55.902041 0L188.604082 259.134694c2.089796-0.522449 3.657143-0.522449 5.746938-0.522449h635.29796z m39.706122 466.02449c0 21.942857-17.763265 39.706122-39.706122 39.706122H194.35102c-21.942857 0-39.706122-17.763265-39.706122-39.706122V298.318367c0-5.22449 1.044898-9.926531 2.612245-14.106122l298.318367 298.318367c15.673469 15.673469 36.04898 22.987755 55.902041 22.987755s40.75102-7.836735 55.902041-22.987755l298.318367-298.318367c1.567347 4.702041 2.612245 9.404082 2.612245 14.106122v426.840817z" fill="#7BD4EF"/></symbol><symbol id="icon-RSS" viewbox="0 0 1024 1024"><path d="M245.323116 913.111046a110.883142 110.883142 0 1 1-110.883141-110.883142A110.883142 110.883142 0 0 1 245.323116 913.111046zM155.901228 1.007785A118.484002 118.484002 0 0 0 61.114026 30.517008 115.801345 115.801345 0 0 0 21.768395 117.25624a117.589783 117.589783 0 0 0 104.1765 114.907126c327.731221 41.581178 603.597746 337.567629 641.15494 688.548541a114.460017 114.460017 0 0 0 114.907126 102.835171 118.036893 118.036893 0 0 0 89.421889-38.898521 113.118689 113.118689 0 0 0 28.615004-89.421889C949.520487 440.963475 586.46762 56.449355 155.901228 1.007785z m7.60086 381.831463A110.883142 110.883142 0 0 0 66.479339 403.406282a117.142674 117.142674 0 0 0-44.710944 92.551655 114.460017 114.460017 0 0 0 89.421889 112.22447c134.132833 32.19188 250.381287 163.642056 279.89051 318.789032a116.248455 116.248455 0 0 0 112.22447 93.445873 116.695564 116.695564 0 0 0 89.421888-42.028287 112.671579 112.671579 0 0 0 24.59102-93.445874C571.713009 643.056943 383.927043 436.492381 161.266541 383.733467z" fill="#FFAD08"/><path d="M62.008245 997.614731l155.146976-155.146977A109.541813 109.541813 0 0 1 245.323116 913.111046a110.883142 110.883142 0 0 1-110.883141 110.883142 109.541813 109.541813 0 0 1-72.43173-26.379457z m513.728749-513.28164a804.796995 804.796995 0 0 1 191.362841 436.378816 114.460017 114.460017 0 0 0 114.907126 102.835171 118.036893 118.036893 0 0 0 89.421889-38.898521 113.118689 113.118689 0 0 0 28.615004-89.421889A1035.058358 1035.058358 0 0 0 737.143502 320.691036z m-185.997528 444.426785a116.248455 116.248455 0 0 0 112.22447 93.445874 116.695564 116.695564 0 0 0 89.421888-42.028288 112.671579 112.671579 0 0 0 24.591019-93.445873 670.664163 670.664163 0 0 0-143.52213-301.351764l-162.747837 164.983384a439.061472 439.061472 0 0 1 80.03259 178.396667z" fill="#D68650"/></symbol><symbol id="icon-github" viewbox="0 0 1024 1024"><path d="M512 0C229.283787 0 0.142041 234.942803 0.142041 524.867683c0 231.829001 146.647305 428.553077 350.068189 497.952484 25.592898 4.819996 34.976961-11.38884 34.976961-25.294314 0-12.45521-0.469203-45.470049-0.725133-89.276559-142.381822 31.735193-172.453477-70.380469-172.453477-70.380469-23.246882-60.569859-56.816233-76.693384-56.816234-76.693385-46.493765-32.58829 3.540351-31.948468 3.540351-31.948467 51.356415 3.71097 78.356923 54.086324 78.356923 54.086324 45.683323 80.19108 119.817417 57.072162 148.993321 43.593236 4.649376-33.91059 17.915029-57.029508 32.50298-70.167195-113.675122-13.222997-233.151301-58.223843-233.1513-259.341366 0-57.285437 19.919806-104.163095 52.678715-140.846248-5.246544-13.265652-22.820334-66.626844 4.990615-138.884127 0 0 42.996069-14.076094 140.760939 53.787741 40.863327-11.644769 84.627183-17.445825 128.177764-17.6591 43.465272 0.213274 87.271782 6.014331 128.135109 17.6591 97.679561-67.906489 140.59032-53.787741 140.59032-53.787741 27.938914 72.257282 10.407779 125.618474 5.118579 138.884127 32.844219 36.683154 52.593405 83.560812 52.593405 140.846248 0 201.586726-119.646798 245.990404-233.663158 258.957473 18.341577 16.208835 34.721032 48.199958 34.721032 97.210357 0 70.167195-0.639822 126.7275-0.639823 143.960051 0 14.033439 9.213443 30.370239 35.190235 25.209005 203.250265-69.527373 349.769606-266.123484 349.769605-497.867175C1023.857959 234.942803 794.673558 0 512 0" fill="#3E75C3"/></symbol><symbol id="icon-zhuye" viewbox="0 0 1024 1024"><path d="M919.6 363.7L806.1 167.1c-13.5-23.4-33.4-41-56.2-51.9-20.5-11.4-43.9-17.9-68.9-17.9H332.9c-6.4 0-12.6 0.6-18.7 1.4-47 1.7-91.6 28.2-113.1 73.3l-97.6 205c-30.7 64.5-3.1 142.4 61.4 173.1 7.2 3.4 14.5 6 21.9 8v302.8c0 36.9 30 66.9 66.9 66.9h366.8c136.1 0 246.8-110.7 246.8-246.8V543.2c1.6-0.8 3.2-1.3 4.8-2.1 61.8-35.7 83.2-115.6 47.5-177.4z m-99.5 317.2c0 110.1-89.6 199.6-199.6 199.6H253.7c-10.8 0-19.7-8.8-19.7-19.7V561.7c36-3.8 69.6-22.6 91.6-52.9h64.7c20.5 45 65.7 76.6 118.1 76.6s97.6-31.6 118.1-76.6H705c27.8 35.3 71.7 52.9 115 48.7v123.4z" fill="#9473EF"/></symbol><symbol id="icon-youxiang1" viewbox="0 0 1024 1024"><path d="M530.6 570.8c-4.6 5.5-9.7 9.7-15.3 12.8-5.6 3.1-11.8 4.7-18.6 4.7-3.7 0-6.9-0.5-9.6-1.4-2.8-1-5.1-2.7-7-5.1-1.9-2.3-3.4-5.5-4.4-9.5s-1.5-9.1-1.5-15.3c0-16.9 2.2-33.8 6.7-50.9 4.5-17 10.7-33 18.7-48.1s17.4-28.7 28.4-40.8c10.9-12.1 22.7-21.7 35.4-28.7l-32.8 182.3z m291-147.7c-4.4 19.7-10.2 38.1-17.3 55.2-7.2 17.2-15.3 32.9-24.5 47.2-9.2 14.2-18.6 26.5-28.4 36.6-9.7 10.1-19.3 18-28.6 23.6-9.4 5.7-17.8 8.6-25.3 8.6-1.8 0-4-0.3-6.5-0.8s-4.8-1.4-7-2.8c-2.2-1.5-4.1-3.5-5.6-6.2-1.6-2.8-2.3-6.3-2.3-10.8 0-5.5 0.9-13.7 2.8-24.5 1.8-10.8 4.9-24.2 9.2-40.3 4.3-16.1 9.9-35 16.8-56.6s15.4-46.2 25.5-73.6c4.6-12.4 7.8-22.9 9.6-31.3 1.8-8.5 2.8-15.6 2.8-21.6 0-5.1-1.6-10.5-4.8-15.9-3.2-5.5-7.7-10.9-13.4-16.2-5.7-5.2-12.4-10.3-20.2-15.1-7.8-4.8-16.4-9-25.7-12.6-9.4-3.6-19.2-6.4-29.5-8.6-10.3-2.2-20.8-3.3-31.7-3.3-2.4 0-5.6 0.2-9.6 0.7s-8.2 1.2-12.5 2.2c-4.3 1-8.3 2.2-12 3.7s-6.5 3.3-8.5 5.2l-6.9 65.6c-2.2-2.4-6.2-4.2-11.8-5.3-5.7-1.1-12.3-1.7-19.8-1.7-14.3 0-28.5 2.4-42.7 7.1-14.1 4.7-27.9 11.2-41.3 19.5s-26.2 18.1-38.5 29.5c-12.3 11.5-23.8 23.8-34.4 37.2-10.6 13.4-20.3 27.6-29 42.4s-16.2 29.9-22.3 45.1c-6.2 15.3-10.9 30.4-14.3 45.5s-5.1 29.5-5.1 43.5c0 20 2.7 38.1 8 54.2 5.3 16 12.6 29.6 21.7 40.7 9.2 11.1 20 19.6 32.6 25.6s26 9 40.3 9c8.8 0 18.3-1.6 28.5-4.9 10.2-3.3 20.5-8.9 30.8-17 10.4-8 20.5-18.7 30.3-32s18.7-30 26.6-50.2c-0.6 4.5-1.1 9.4-1.7 14.8-0.6 5.3-0.8 10.3-0.8 14.7 0 15 1.9 27.4 5.6 37.3 3.8 9.9 9 17.8 15.8 23.8s14.9 10.2 24.4 12.7c9.4 2.5 19.8 3.7 31 3.7 21.7 0 43.4-3.3 65.1-10 21.7-6.6 43-15.8 63.7-27.6s40.7-25.8 59.9-42.1 37.2-34 54-53.2 32.1-39.3 45.8-60.6c13.8-21.3 25.6-43 35.5-65s17.6-44.1 23-66.1 8.1-43.2 8.1-63.6c0-43.1-7.4-81.6-22.2-115.6s-36.3-62.7-64.6-86.3c-28.3-23.5-63-41.6-104.1-54C724.8 70.2 678 64 625.3 64c-36.5 0-72.5 4.1-107.9 12.4s-69.6 20-102.5 35.3c-32.9 15.2-64.4 33.6-94.4 55-30 21.3-57.9 45.1-83.7 71.4-25.8 26.3-49.1 54.5-69.9 84.8-20.8 30.2-38.6 61.8-53.4 94.8-14.8 32.9-26.2 66.8-34.1 101.7-8 34.9-12 70-12 105.4 0 33.6 3.3 65.1 10 94.7 6.7 29.6 16.5 56.8 29.5 81.6 12.9 24.8 28.9 47.1 48 66.8 19.1 19.6 41 36.3 65.8 50 24.8 13.6 52.3 24.1 82.7 31.3 30.4 7.3 63.3 10.9 98.7 10.9 24.6 0 48.8-2.7 72.5-8 23.8-5.4 46.3-12.5 67.4-21.3 21.2-8.9 40.7-19.1 58.6-30.5 17.9-11.5 33.4-23.4 46.4-35.8 13-12.4 23.2-24.7 30.4-37s10.9-23.7 10.9-34.2c0-8.8-3-16.2-8.9-22.3-6-6-14.6-10-26-11.9-17.4 14.1-34.5 26.2-51.1 36.1-16.6 9.9-33 17.9-49.3 24.1-16.2 6.1-32.5 10.6-48.7 13.3s-32.6 4.1-49.1 4.1c-39.5 0-74.7-5.7-105.6-17-30.9-11.4-57-28-78.3-49.8-21.3-21.9-37.5-48.8-48.7-80.9-11.2-32-16.8-68.8-16.8-110.3 0-22.5 2.6-45.6 7.7-69.3 5.1-23.7 12.6-47.2 22.3-70.6s21.6-46.2 35.5-68.7c13.9-22.4 29.8-43.6 47.5-63.4s37.1-38.1 58.2-54.9 43.6-31.2 67.6-43.3c23.9-12.1 49.2-21.6 75.7-28.4 26.5-6.8 54-10.2 82.4-10.2 35.8 0 67.7 4.7 95.7 14s51.6 22.5 70.7 39.4c19.2 16.9 33.8 37.2 43.9 60.8 10.1 23.6 15.1 49.6 15.1 78 0.1 20.9-2.1 41.3-6.5 61z" fill="#040000"/></symbol><symbol id="icon-shejiaotubiao-39" viewbox="0 0 1024 1024"><path d="M512 73.28A438.72 438.72 0 1 0 950.72 512 438.72 438.72 0 0 0 512 73.28zM759.84 646.4c-9.6 8.16-20.8-6.08-29.76-20.32s-14.88-26.72-16-21.76a158.4 158.4 0 0 1-37.44 70.72c-1.28 1.6 28.8 12.48 37.44 35.68s24 57.6-80 68.8a145.76 145.76 0 0 1-80-16c-16.96-8.32-27.52-16-29.6-16a73.6 73.6 0 0 1-13.28 0 108 108 0 0 1-14.4 0c-1.76 0-22.24 32-113.12 32-70.4 0-88.64-44.32-74.4-68.8s37.76-32 34.4-35.36a192 192 0 0 1-34.4-57.6 98.56 98.56 0 0 1-4.16-13.44c-1.28-4.64-6.56 8.64-13.92 21.76s-14.4 22.72-22.88 22.72a11.52 11.52 0 0 1-6.56-2.4c-20.96-16-19.2-55.2-5.44-93.12s48-75.04 48-83.2c1.28-30.24-3.04-35.2 0-43.2 6.56-17.76 14.72-10.88 14.72-20.16 0-116.32 86.4-210.56 192.96-210.56s192.96 94.24 192.96 210.56c0 4.48 11.68 0 17.12 20.16a196.96 196.96 0 0 1 0 43.2c0 11.04 29.44 24.48 44.8 83.2S768 640 759.84 646.4z" fill="#68A5E1"/></symbol><symbol id="icon-bilibili" viewbox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75h-738.7a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3"/><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3"/></symbol><symbol id="icon-shijianjiedian" viewbox="0 0 1024 1024"><path d="M729.9 752.9m-178.3 0a178.3 178.3 0 1 0 356.6 0 178.3 178.3 0 1 0-356.6 0Z" fill="#83C1FF"/><path d="M131.8 844.3v-0.5H84.4v-3.5h47.5v-0.5l0.1 2.3-0.2 2.2z" fill="#FFFFFF"/><path d="M561.8 843.6H135.2c-1.2 0-2.2-0.6-2.8-1.5 0.6-0.9 1.6-1.5 2.8-1.5 28 0 50.8-22.8 50.8-50.8v-42.6c0-40.9 16.7-81 45.9-110l121.8-121.4c9.4-9.4 14.6-22 14.6-35.3 0-13.4-5.2-25.9-14.6-35.4L231.8 323.8c-29.6-29.4-45.8-68.5-45.8-110v-42.6c0-28-22.8-50.8-50.8-50.8-1.8 0-3.3-1.5-3.3-3.3V113c0-1.8 1.5-3.3 3.3-3.3h599c1.8 0 3.3 1.5 3.3 3.3v4.1c0 1.8-1.5 3.3-3.3 3.3-28 0-50.8 22.8-50.8 50.8v42.6c0 41.5-16.3 80.6-45.8 110L515.8 445c-9.4 9.4-14.6 22-14.6 35.3 0 13.4 5.2 25.9 14.6 35.3l89.5 89.2c11.5-11.1 24.2-20.9 38-29.2l-93.9-93.7c-0.5-0.5-0.7-1.1-0.7-1.7 0-0.7 0.2-1.3 0.7-1.7l121.8-121.2c38.6-38.4 59.8-89.4 59.8-143.6v-42.6c0-1.8 1.5-3.3 3.3-3.3 28 0 50.8-22.8 50.8-50.8v-4c0-28-22.8-50.8-50.8-50.8h-599c-28 0-50.8 22.8-50.8 50.8v4.1c0 28 22.8 50.8 50.8 50.8 1.8 0 3.3 1.5 3.3 3.3v42.6c0 54.2 21.2 105.2 59.8 143.6L320 478.6c0.5 0.5 0.7 1.1 0.7 1.8s-0.2 1.3-0.7 1.7L198.3 603.5c-38 37.8-59.8 90.2-59.8 143.6v42.6c0 1.8-1.5 3.3-3.3 3.3-26.7 0-48.9 20.9-50.6 47.5l-0.1 1.5 0.1 1.5c1.7 26.6 24 47.5 50.6 47.5h457.7c-12.4-14.2-22.9-30.2-31.1-47.4z" fill="#FFFFFF"/><path d="M541.9 754.5c0-58.7 24.3-111.7 63.4-149.6l-29.8-29.7H293.8l-62.1 61.9c-29.1 29-45.9 69.1-45.9 110v42.6c0 28-22.8 50.8-50.8 50.8-1.2 0-2.2 0.6-2.8 1.5 0.6 0.9 1.6 1.5 2.8 1.5h426.7c-12.6-26.9-19.8-57.1-19.8-89z" fill="#83C1FF"/><path d="M259.1 606.7l-15.2-30c4.4-2.3 109.5-54.7 185.6-16.5 61.8 31 165.5-12.1 166.6-12.6l13.1 31c-3.5 1.5-63.2 26.3-124.6 26.3-24.3 0-48.8-3.9-70.2-14.6-61.1-30.7-154.3 15.9-155.3 16.4zM813.1 794.2L748.9 757V653.9c0-13.7-11.2-24.9-24.9-24.9s-24.9 11.2-24.9 24.9v108c0 17.9 11.9 26.6 24 34 16.8 10.3 67.6 41 68.1 41.3l0.1 0.1c3.9 2.3 8.1 3.4 12.1 3.4 8.1 0 15.7-4.4 20.4-12.5 3-5.2 3.8-11.4 2.2-17.5-1.9-6.9-6.6-12.9-12.9-16.5z" fill="#FFFFFF"/><path d="M729.9 546.6c-113.8 0-206.4 92.6-206.4 206.4 0 113.8 92.6 206.4 206.4 206.4 113.8 0 206.4-92.6 206.4-206.4 0-113.9-92.6-206.4-206.4-206.4z m164.8 206.3c0 90.9-73.9 164.8-164.8 164.8s-164.8-73.9-164.8-164.8S639 588.1 729.9 588.1s164.8 74 164.8 164.8z" fill="#FFFFFF"/></symbol><symbol id="icon-GitHub" viewbox="0 0 1049 1024"><path d="M524.979332 0C234.676191 0 0 234.676191 0 524.979332c0 232.068678 150.366597 428.501342 358.967656 498.035028 26.075132 5.215026 35.636014-11.299224 35.636014-25.205961 0-12.168395-0.869171-53.888607-0.869171-97.347161-146.020741 31.290159-176.441729-62.580318-176.441729-62.580318-23.467619-60.841976-58.234462-76.487055-58.234463-76.487055-47.804409-32.15933 3.476684-32.15933 3.476685-32.15933 53.019436 3.476684 80.83291 53.888607 80.83291 53.888607 46.935238 79.963739 122.553122 57.365291 152.97411 43.458554 4.345855-33.897672 18.252593-57.365291 33.028501-70.402857-116.468925-12.168395-239.022047-57.365291-239.022047-259.012982 0-57.365291 20.860106-104.300529 53.888607-140.805715-5.215026-13.037566-23.467619-66.926173 5.215027-139.067372 0 0 44.327725-13.906737 144.282399 53.888607 41.720212-11.299224 86.917108-17.383422 131.244833-17.383422s89.524621 6.084198 131.244833 17.383422C756.178839 203.386032 800.506564 217.29277 800.506564 217.29277c28.682646 72.1412 10.430053 126.029806 5.215026 139.067372 33.897672 36.505185 53.888607 83.440424 53.888607 140.805715 0 201.64769-122.553122 245.975415-239.891218 259.012982 19.121764 16.514251 35.636014 47.804409 35.636015 97.347161 0 70.402857-0.869171 126.898978-0.869172 144.282399 0 13.906737 9.560882 30.420988 35.636015 25.205961 208.601059-69.533686 358.967656-265.96635 358.967655-498.035028C1049.958663 234.676191 814.413301 0 524.979332 0z" fill="#191717"/><path d="M199.040177 753.571326c-0.869171 2.607513-5.215026 3.476684-8.691711 1.738342s-6.084198-5.215026-4.345855-7.82254c0.869171-2.607513 5.215026-3.476684 8.691711-1.738342s5.215026 5.215026 4.345855 7.82254z m-6.953369-4.345856M219.900283 777.038945c-2.607513 2.607513-7.82254 0.869171-10.430053-2.607514-3.476684-3.476684-4.345855-8.691711-1.738342-11.299224 2.607513-2.607513 6.953369-0.869171 10.430053 2.607514 3.476684 4.345855 4.345855 9.560882 1.738342 11.299224z m-5.215026-5.215027M240.760389 807.459932c-3.476684 2.607513-8.691711 0-11.299224-4.345855-3.476684-4.345855-3.476684-10.430053 0-12.168395 3.476684-2.607513 8.691711 0 11.299224 4.345855 3.476684 4.345855 3.476684 9.560882 0 12.168395z m0 0M269.443034 837.011749c-2.607513 3.476684-8.691711 2.607513-13.906737-1.738342-4.345855-4.345855-6.084198-10.430053-2.607513-13.037566 2.607513-3.476684 8.691711-2.607513 13.906737 1.738342 4.345855 3.476684 5.215026 9.560882 2.607513 13.037566z m0 0M308.555733 853.526c-0.869171 4.345855-6.953369 6.084198-13.037566 4.345855-6.084198-1.738342-9.560882-6.953369-8.691711-10.430053 0.869171-4.345855 6.953369-6.084198 13.037566-4.345855 6.084198 1.738342 9.560882 6.084198 8.691711 10.430053z m0 0M351.145116 857.002684c0 4.345855-5.215026 7.82254-11.299224 7.82254-6.084198 0-11.299224-3.476684-11.299224-7.82254s5.215026-7.82254 11.299224-7.82254c6.084198 0 11.299224 3.476684 11.299224 7.82254z m0 0M391.126986 850.049315c0.869171 4.345855-3.476684 8.691711-9.560882 9.560882-6.084198 0.869171-11.299224-1.738342-12.168395-6.084197-0.869171-4.345855 3.476684-8.691711 9.560881-9.560882 6.084198-0.869171 11.299224 1.738342 12.168396 6.084197z m0 0" fill="#191717"/></symbol><symbol id="icon-duihua" viewbox="0 0 1024 1024"><path d="M522.8 735.4h20.5M715.9 716.4h-29.6" fill="#FFFFFF"/><path d="M830.8 716.2s-22 43.2 12.3 61.2c0 0-58.6 7.3-80-36l40-40.7 27.7 15.5z" fill="#FECD44"/><path d="M763 741.4l30.3-30.8 37.5 5.6c-21.2 25.2-28.9 46.5-31.5 56.2-14-5-28-14.2-36.3-31z" fill="#D6AD39"/><path d="M533.1 609.4c0 92.8 75.2 168 168 168 58 0 109.1-29.4 139.3-74.1 18.1-26.8 28.7-59.1 28.7-93.9 0-92.8-75.2-168-168-168s-168 75.2-168 168z" fill="#FECD44"/><path d="M777.8 609.4m-24.7 0a24.7 24.7 0 1 0 49.4 0 24.7 24.7 0 1 0-49.4 0Z" fill="#FFFFFF"/><path d="M701.1 609.4m-24.7 0a24.7 24.7 0 1 0 49.4 0 24.7 24.7 0 1 0-49.4 0Z" fill="#FFFFFF"/><path d="M624.4 609.4m-24.7 0a24.7 24.7 0 1 0 49.4 0 24.7 24.7 0 1 0-49.4 0Z" fill="#FFFFFF"/><path d="M702 710.8h-32.3M397 680.7h46.7" fill="#FFFFFF"/><path d="M215.4 680.4s34.8 68.3-19.4 96.7c0 0 92.6 11.5 126.5-56.8L259.3 656l-43.9 24.4z" fill="#1F53CC"/><path d="M322.5 720.3l-47.9-48.7-59.2 8.9c33.4 39.8 45.6 73.5 49.8 88.7 22.1-7.8 44.2-22.3 57.3-48.9z" fill="#18409E"/><path d="M685.9 511.6c0 146.6-118.9 265.5-265.5 265.5-91.6 0-172.4-46.4-220.1-117.1-28.6-42.4-45.3-93.5-45.3-148.4 0-146.6 118.9-265.5 265.5-265.5S685.9 365 685.9 511.6z" fill="#1F53CC"/><path d="M299.2 511.6m-39 0a39 39 0 1 0 78 0 39 39 0 1 0-78 0Z" fill="#FFFFFF"/><path d="M420.4 511.6m-39 0a39 39 0 1 0 78 0 39 39 0 1 0-78 0Z" fill="#FFFFFF"/><path d="M541.5 511.6m-39 0a39 39 0 1 0 78 0 39 39 0 1 0-78 0Z" fill="#FFFFFF"/></symbol><symbol id="icon-laoshu" viewbox="0 0 1024 1024"><path d="M821.4 453.8c-9.2 0-18.8-0.7-28.5-1.9-62.2-8.3-80.8-25.7-86.4-35.3-4.7-8.1-2.5-14.6-2.5-14.7 1.2-3 1-6.3-0.5-9.1-2.6-4.8-62.5-114.8 29.4-187.6 25.7-20.4 52.4-30.7 79.5-30.7 59.6 0 115.7 52.9 133.4 125.8 10.2 41.9 3.6 80.5-18.4 108.5-22.8 29-60.5 45-106 45z" fill="#FF6A48"/><path d="M812.4 185c54.8 0 106.6 49.5 123.2 117.8 9.4 38.7 3.6 74.1-16.5 99.6-20.8 26.4-55.5 40.9-97.8 40.9-8.7 0-17.8-0.6-27.1-1.9-57.9-7.7-73.8-23-78-29.2-2.6-3.8-2.3-6.5-2.5-6.5 3.6-6.4 2.5-11.8-1.1-18.2-2.4-4.3-58.4-106.6 26.8-174.1 23.8-18.8 48.3-28.4 73-28.4m0-21c-27.7 0-57 9.9-86 32.9-100.2 79.4-32 200.9-32 200.9s-20 48.8 97.2 64.4c10.3 1.4 20.3 2 29.9 2 99.4 0 157.7-71.6 134.6-166.5C938 223.9 880.3 164 812.4 164z" fill="#7F0518"/><path d="M204.6 453.8c-45.6 0-83.2-16-106-45-22-28-28.6-66.6-18.4-108.5 17.7-72.9 73.8-125.8 133.4-125.8 27.1 0 53.8 10.3 79.5 30.7 92.1 73 32 182.9 29.4 187.5-1.6 2.8-1.8 6.2-0.5 9.1 0 0.1 2.3 6.8-2.8 15.3-5.8 9.5-24.7 26.6-86 34.8-9.8 1.2-19.3 1.9-28.6 1.9 0.1 0 0.1 0 0 0z" fill="#FF6A48"/><path d="M213.6 185c24.7 0 49.2 9.6 73 28.4 84.7 67.1 29.1 169.9 26.8 174.1-3.6 6.4-5.1 10.8-1.5 17.2 0.1 0.5 0.7 3.4-2.1 7.6-4.2 6.2-20.2 21.4-78 29.2-9.2 1.2-18.3 1.9-27.1 1.9-42.3 0-77-14.5-97.8-40.9-20-25.5-25.9-60.8-16.5-99.6C107 234.5 158.8 185 213.6 185m0-21C145.7 164 88 223.9 70 297.8c-23 94.9 35.3 166.5 134.6 166.5 9.6 0 19.5-0.7 29.9-2 117.2-15.7 97.2-64.4 97.2-64.4s68.2-121.5-32-200.9c-29.1-23.1-58.4-33-86.1-33z" fill="#7F0518"/><path d="M726.6 396.5s-45.9-65.9 7.2-117.1c53.1-51.2 117.1-13.2 137.4 45.1 20.3 58.3-17.1 106-85.3 103.5-68.1-2.4-59.3-31.5-59.3-31.5z" fill="#FFC831"/><path d="M790.8 438.7c-1.7 0-3.5 0-5.2-0.1-32.9-1.2-54.6-8.7-64.4-22.4-4.6-6.4-5.5-12.7-5.4-17-17-27-34.4-83.8 10.8-127.3 23.5-22.6 51.7-31.4 79.6-24.8 33.1 7.9 61.9 36.3 75 74 10.6 30.5 7.4 59.6-9.1 81.9-16.9 22.8-46.3 35.7-81.3 35.7z m-54.1-39.5c-0.1 0.4-0.3 2.6 1.9 5.3 2.8 3.5 13.1 11.9 47.7 13.1 30.6 1 55.1-8.5 68.8-27.1 12.2-16.6 14.4-38.7 6.2-62.5-10.6-30.5-34.2-54.3-60-60.5-21-5-41.8 1.7-60.2 19.5-46.1 44.4-7.6 101.1-5.9 103.5 1.8 2.5 2.3 5.7 1.5 8.7z" fill="#7F0518"/><path d="M294.4 396.5s45.9-65.9-7.2-117.1C234 228.3 170 266.3 149.8 324.6c-20.3 58.3 17.1 106 85.3 103.5 68.1-2.5 59.3-31.6 59.3-31.6z" fill="#FFC831"/><path d="M230.2 438.7c-34.9 0-64.4-12.9-81.2-35.7-16.5-22.3-19.7-51.4-9.1-81.9 13.1-37.7 41.8-66.1 75-74 27.9-6.7 56.1 2.1 79.6 24.8 45.1 43.5 27.8 100.3 10.8 127.3 0.1 4.3-0.8 10.6-5.4 17-9.8 13.7-31.4 21.2-64.4 22.4-1.9 0-3.6 0.1-5.3 0.1z m3-172.8c-4.5 0-9 0.5-13.5 1.6-25.8 6.2-49.4 29.9-60 60.5-8.2 23.7-6.1 45.9 6.2 62.5 13.7 18.6 38.1 28.4 68.8 27.1 34.6-1.2 44.9-9.6 47.7-13.1 2.3-2.8 1.9-5.1 1.9-5.4-0.9-3-0.3-5.9 1.5-8.5 1.7-2.4 40-59.3-5.9-103.5-14.5-14-30.4-21.2-46.7-21.2z" fill="#7F0518"/><path d="M839.1 615.5c0 166.6-150.2 235.3-335.5 235.3s-335.5-68.7-335.5-235.3c0-166.6 150.2-367.9 335.5-367.9s335.5 201.3 335.5 367.9z" fill="#FF6A48"/><path d="M503.7 861.2c-216.6 0-346-91.9-346-245.8C157.7 444 312 237 503.7 237c191.6 0 346 207 346 378.4-0.1 154-129.4 245.8-346 245.8z m0-603.1c-180 0-325 195.5-325 357.4 0 202.9 227.3 224.8 325 224.8s325-21.9 325-224.8c-0.1-161.9-145-357.4-325-357.4z" fill="#7F0518"/><path d="M461.2 611.5a42.4 29.7 0 1 0 84.8 0 42.4 29.7 0 1 0-84.8 0Z" fill="#7F0518"/><path d="M634.3 477.2m-63 0a63 63 0 1 0 126 0 63 63 0 1 0-126 0Z" fill="#7F0518"/><path d="M618.5 464.4m-29 0a29 29 0 1 0 58 0 29 29 0 1 0-58 0Z" fill="#FFFFFF"/><path d="M655.6 506.7m-13.2 0a13.2 13.2 0 1 0 26.4 0 13.2 13.2 0 1 0-26.4 0Z" fill="#FFFFFF"/><path d="M373 477.2m-63 0a63 63 0 1 0 126 0 63 63 0 1 0-126 0Z" fill="#7F0518"/><path d="M357.1 464.4m-29 0a29 29 0 1 0 58 0 29 29 0 1 0-58 0Z" fill="#FFFFFF"/><path d="M394.3 506.7m-13.2 0a13.2 13.2 0 1 0 26.4 0 13.2 13.2 0 1 0-26.4 0Z" fill="#FFFFFF"/><path d="M588 384.4c-2.3 0-4.7-0.8-6.6-2.4-4.5-3.7-5.2-10.3-1.5-14.8 0.7-0.8 16.9-20.4 42.8-22.3 17.7-1.2 35.2 5.8 51.9 21.2 4.3 3.9 4.5 10.6 0.6 14.8-3.9 4.3-10.6 4.6-14.8 0.6-12.2-11.3-24.4-16.4-36.1-15.7-16.7 1.2-27.9 14.5-28 14.6-2.2 2.7-5.3 4-8.3 4z" fill="#7F0518"/><path d="M339.9 384.4c-2.3 0-4.7-0.8-6.6-2.4-4.5-3.7-5.2-10.3-1.5-14.8 0.7-0.8 16.9-20.4 42.8-22.3 17.8-1.2 35.2 5.8 51.9 21.2 4.3 3.9 4.5 10.6 0.6 14.8-3.9 4.3-10.6 4.6-14.8 0.6-12.2-11.3-24.4-16.4-36.1-15.7-16.7 1.2-27.9 14.5-28 14.6-2.3 2.7-5.3 4-8.3 4z" fill="#7F0518"/><path d="M458.5 713c-3.2 0-6.5-0.3-9.6-0.9-29.2-5.5-44-34.5-44.6-35.8-2.6-5.2-0.5-11.4 4.7-14 5.1-2.6 11.5-0.5 14.1 4.6 0.1 0.2 10.9 21 29.8 24.5 12.1 2.2 25.6-3 40.3-15.4v-51.2c0-5.8 4.7-10.5 10.5-10.5s10.5 4.7 10.5 10.5v56c0 3-1.2 5.8-3.4 7.8-17.9 16.3-35.4 24.4-52.3 24.4z" fill="#7F0518"/><path d="M548.8 713c-16.9 0-34.4-8.2-52.2-24.3-4.3-3.9-4.6-10.5-0.7-14.8 3.9-4.3 10.6-4.6 14.8-0.7 16.1 14.6 30.9 20.8 43.8 18.3 18.8-3.5 29.6-24.3 29.7-24.5 2.6-5.2 8.8-7.3 14.1-4.7 5.2 2.6 7.3 8.9 4.7 14.1-0.6 1.2-15.4 30.3-44.6 35.8-3.1 0.5-6.4 0.8-9.6 0.8z" fill="#7F0518"/><path d="M776.8 637.7c-4.9 0-9.3-3.4-10.3-8.4-1.1-5.7 2.5-11.2 8.2-12.4l106.8-21.4c5.6-1.1 11.2 2.5 12.4 8.2 1.1 5.7-2.5 11.2-8.2 12.4l-106.8 21.4c-0.8 0.2-1.5 0.2-2.1 0.2zM884.6 669.5H775.7c-5.8 0-10.5-4.7-10.5-10.5s4.7-10.5 10.5-10.5h108.9c5.8 0 10.5 4.7 10.5 10.5s-4.7 10.5-10.5 10.5zM879.5 727.4c-0.7 0-1.4-0.1-2.2-0.2l-106.5-22.5c-5.7-1.2-9.3-6.8-8.1-12.4 1.2-5.7 6.7-9.4 12.4-8.1l106.5 22.5c5.7 1.2 9.3 6.8 8.1 12.4-0.9 4.9-5.3 8.3-10.2 8.3z" fill="#7F0518"/><path d="M232.8 637.7c-0.7 0-1.4-0.1-2.1-0.2L124 616.2c-5.7-1.1-9.4-6.7-8.2-12.4 1.1-5.7 6.6-9.3 12.4-8.2L235 617c5.7 1.1 9.4 6.7 8.2 12.4-1.1 4.9-5.5 8.3-10.4 8.3zM233.8 669.5H125c-5.8 0-10.5-4.7-10.5-10.5s4.7-10.5 10.5-10.5h108.9c5.8 0 10.5 4.7 10.5 10.5s-4.8 10.5-10.6 10.5zM130 727.4c-4.9 0-9.2-3.4-10.3-8.3-1.2-5.7 2.4-11.3 8.1-12.4l106.5-22.5c5.7-1.3 11.3 2.4 12.4 8.1 1.2 5.7-2.4 11.3-8.1 12.4l-106.5 22.5c-0.6 0.1-1.4 0.2-2.1 0.2z" fill="#7F0518"/></symbol><symbol id="icon-niu" viewbox="0 0 1024 1024"><path d="M763.9 338.9s2.6-164.2-53.9-169.8c-56.4-5.5-53.8 155.9-53.8 155.9l107.7 13.9z" fill="#FFC831"/><path d="M763.9 349.4c-0.5 0-0.9 0-1.3-0.1l-107.7-13.9c-5.2-0.7-9.1-5-9.2-10.3-0.2-12.4-0.9-122.5 35.7-156.2 8.5-7.8 18.7-11.4 29.7-10.3 64.2 6.3 63.6 162.6 63.3 180.4-0.1 3-1.4 5.8-3.6 7.8-2 1.7-4.4 2.6-6.9 2.6z m-97.2-33.7l86.7 11.2c-0.8-53.4-11.6-144.1-44.4-147.4-4.9-0.5-9.2 1.1-13.4 4.9-23 21.2-28.5 95-28.9 131.3z" fill="#7F0518"/><path d="M258.9 338.9s-2.6-164.2 53.9-169.8c56.4-5.5 53.8 155.9 53.8 155.9l-107.7 13.9z" fill="#FFC831"/><path d="M258.9 349.4c-2.5 0-4.9-0.9-6.9-2.6-2.3-2-3.6-4.8-3.6-7.8-0.3-17.8-0.8-174 63.3-180.4 11-1.1 21.2 2.5 29.7 10.3 36.6 33.7 35.9 143.7 35.7 156.2-0.1 5.2-4 9.6-9.2 10.3l-107.7 13.9c-0.4 0-0.8 0.1-1.3 0.1z m56.7-170c-0.6 0-1.2 0-1.8 0.1-32.8 3.2-43.6 94-44.4 147.4l86.7-11.2c-0.4-36.3-5.9-110.1-28.9-131.3-3.6-3.4-7.4-5-11.6-5z" fill="#7F0518"/><path d="M860 458.8c-35 0-58.5-7.1-67.9-20.6-9.1-12.9-19.8-23.7-30.2-34-29.6-29.5-46.1-46-8.8-85.7 7-2 28.4-7.5 54.3-7.5 39.7 0 71.3 12.4 93.9 36.7 43.8 47.2 48.5 85.4 48.5 100.1-15.8 3.4-54 11-89.8 11z" fill="#FF6A48"/><path d="M807.3 321.4c36.7 0 65.7 11.2 86.2 33.4 34.6 37.4 43.3 68.1 45.2 84.6-18.1 3.7-49.1 8.9-78.6 8.9-30.5 0-52.2-5.9-59.3-16.1-9.6-13.7-21.2-25.3-31.4-35.5-29-28.9-38.6-38.4-10.6-69 8.2-2.2 26.7-6.3 48.5-6.3m-0.1-21c-33.7 0-60 8.8-60 8.8-62.7 65.1 2.4 86.8 36.2 135 13.5 19.3 44.4 25.1 76.5 25.1 48.3 0 99.5-13 99.5-13s9.6-50.6-50.6-115.7c-29.6-32.1-69-40.2-101.6-40.2z" fill="#7F0518"/><path d="M770.2 342.6s55.6-18.5 88.8 17.2c33.1 35.8 27.8 63.6 27.8 63.6s-78.2 19.9-96.7-6.6-54.3-38.5-19.9-74.2z" fill="#EE3E2B"/><path d="M833 441.2c-20.8 0-41.5-4.2-51.5-18.4-4.2-6-9.6-11.3-14.8-16.5-15.6-15.5-37-36.8-4-71 1.2-1.2 2.6-2.1 4.2-2.7 2.5-0.8 62.5-20.2 99.8 20.1 36.3 39.2 30.7 71.3 30.4 72.7-0.8 4-3.8 7.2-7.7 8.2-7.6 1.9-32.1 7.6-56.4 7.6z m-57.1-89.4c-16.2 17.7-10 23.9 5.6 39.5 5.6 5.6 11.9 11.9 17.1 19.4 9.1 12.9 48.5 10.5 77.8 4.3-0.8-9-5.3-26.6-25.2-48.1-24.4-26.4-65-17.7-75.3-15.1z" fill="#7F0518"/><path d="M164.1 458.8c-35.8 0-73.9-7.5-89.5-11 0.1-14.8 5.1-53.4 48.4-100.1 22.6-24.4 54.2-36.7 93.9-36.7 26 0 47.3 5.5 54.3 7.5 37.3 39.8 20.8 56.2-8.8 85.7-10.4 10.4-21.2 21.1-30.2 34.1-9.6 13.4-33.1 20.5-68.1 20.5z" fill="#FF6A48"/><path d="M216.8 321.4c21.8 0 40.3 4.1 48.6 6.3 28 30.5 18.4 40.1-10.6 69-10.2 10.2-21.8 21.8-31.4 35.5-7.2 10.2-28.8 16.1-59.3 16.1-29.4 0-60.5-5.2-78.6-8.9 1.9-16.6 10.6-47.3 45.2-84.6 20.5-22.2 49.4-33.4 86.1-33.4m0-21c-32.5 0-72 8.1-101.6 40.1C55 405.6 64.6 456.3 64.6 456.3s51.2 13 99.5 13c32.2 0 63-5.8 76.5-25.1 33.8-48.2 98.9-70 36.2-135 0 0-26.2-8.8-60-8.8z" fill="#7F0518"/><path d="M253.8 342.6s-55.6-18.5-88.8 17.2c-33.1 35.8-27.8 63.6-27.8 63.6s78.2 19.9 96.7-6.6c18.6-26.5 54.4-38.5 19.9-74.2z" fill="#EE3E2B"/><path d="M191.1 441.2c-24.3 0-48.8-5.7-56.4-7.6-4-1-7-4.2-7.7-8.2-0.3-1.3-5.9-33.5 30.4-72.7 37.3-40.3 97.2-20.9 99.8-20.1 1.6 0.5 3.1 1.5 4.2 2.7 32.9 34.2 11.5 55.4-4 71-5.2 5.2-10.6 10.6-14.8 16.5-10 14.2-30.7 18.4-51.5 18.4zM147.6 415c29.3 6.2 68.7 8.7 77.8-4.3 5.2-7.5 11.6-13.8 17.1-19.3 15.7-15.6 21.9-21.8 5.6-39.5-10.2-2.7-50.9-11.4-75.4 15.1-19.8 21.4-24.3 39-25.1 48z" fill="#7F0518"/><path d="M840.5 592.2c0 193-147.4 272.6-329.2 272.6s-329.2-79.6-329.2-272.6c0-193 146.2-400 328-400 181.9 0 330.4 207 330.4 400z" fill="#FF6A48"/><path d="M511.4 875.3c-212.7 0-339.7-105.8-339.7-283.1 0-193.8 144.7-410.5 338.5-410.5 192 0 340.9 220.7 340.9 410.5-0.1 177.2-127 283.1-339.7 283.1z m-1.2-672.6c-178.8 0-317.5 209.4-317.5 389.5 0 236.6 222.9 262.1 318.7 262.1S830 828.7 830 592.2c0-180.1-139.7-389.5-319.8-389.5z" fill="#7F0518"/><path d="M509.9 570.5c-125.8 0-238.8 44.7-318.7 109.3 34.1 127.3 164.5 181.3 320.4 181.3 155.4 0 285.6-53.7 320.1-180.3-81-65.2-195.3-110.3-321.8-110.3z" fill="#FFFFFF"/><path d="M511.5 871.6c-177.8 0-298.3-68.9-330.5-189.1-1.1-4 0.3-8.3 3.5-10.9C272.3 600.7 390.9 560 509.9 560c119.8 0 239.5 41 328.3 112.6 3.3 2.6 4.6 6.9 3.5 10.9-32.6 119.6-152.9 188.1-330.2 188.1zM203.2 683.7c43.6 145.1 211.3 166.9 308.3 166.9 96.7 0 263.9-21.8 308.1-165.9-84.6-66-197-103.7-309.7-103.7-111.8 0-223.2 37.4-306.7 102.7z" fill="#7F0518"/><path d="M643.4 464.8m-63.6 0a63.6 63.6 0 1 0 127.2 0 63.6 63.6 0 1 0-127.2 0Z" fill="#7F0518"/><path d="M627.3 451.9m-29.3 0a29.3 29.3 0 1 0 58.6 0 29.3 29.3 0 1 0-58.6 0Z" fill="#FFFFFF"/><path d="M664.9 494.6m-13.4 0a13.4 13.4 0 1 0 26.8 0 13.4 13.4 0 1 0-26.8 0Z" fill="#FFFFFF"/><path d="M379.4 464.8m-63.6 0a63.6 63.6 0 1 0 127.2 0 63.6 63.6 0 1 0-127.2 0Z" fill="#7F0518"/><path d="M363.4 451.9m-29.3 0a29.3 29.3 0 1 0 58.6 0 29.3 29.3 0 1 0-58.6 0Z" fill="#FFFFFF"/><path d="M400.9 494.6m-13.4 0a13.4 13.4 0 1 0 26.8 0 13.4 13.4 0 1 0-26.8 0Z" fill="#FFFFFF"/><path d="M596.6 371c-2.3 0-4.7-0.8-6.6-2.4-4.5-3.7-5.2-10.3-1.5-14.8 0.7-0.8 17-20.6 43.2-22.5 17.9-1.6 35.5 5.9 52.3 21.4 4.3 3.9 4.5 10.6 0.6 14.8-3.9 4.3-10.5 4.6-14.8 0.6-12.4-11.4-24.8-17-36.6-15.9-16.9 1.2-28.3 14.7-28.4 14.8-2.2 2.7-5.2 4-8.2 4z" fill="#7F0518"/><path d="M426.2 371c-2.5 0-5.1-0.9-7.1-2.8-12.3-11.3-24.3-16.6-36.4-15.9-17 1.1-28.5 14.7-28.6 14.8-3.7 4.4-10.3 5.1-14.8 1.4-4.5-3.7-5.1-10.2-1.5-14.7 0.7-0.8 17-20.6 43.2-22.5 18-1.6 35.5 5.9 52.3 21.4 4.3 3.9 4.5 10.6 0.6 14.8-2 2.4-4.9 3.5-7.7 3.5z" fill="#7F0518"/><path d="M645.095669 753.087223a35 35 0 1 0 47.47387-51.441536 35 35 0 1 0-47.47387 51.441536Z" fill="#FFC831"/><path d="M668.7 772.9c-11.5 0-22.3-4.3-30.8-12.1-8.9-8.2-14.1-19.5-14.6-31.6-0.5-12.1 3.8-23.7 12-32.7 8.2-8.9 19.5-14.1 31.6-14.6 11.9-0.5 23.7 3.8 32.7 12 8.9 8.2 14.1 19.5 14.6 31.6s-3.8 23.8-12 32.7-19.5 14.1-31.6 14.6c-0.6 0.1-1.2 0.1-1.9 0.1z m0.1-70h-1c-6.5 0.3-12.6 3.1-17 7.9-9.2 9.9-8.5 25.5 1.4 34.6 9.9 9.1 25.4 8.5 34.6-1.4 4.4-4.8 6.7-11.1 6.5-17.6-0.3-6.5-3.1-12.6-7.9-17-4.6-4.3-10.4-6.5-16.6-6.5z" fill="#7F0518"/><path d="M363.889602 753.07937a35 35 0 1 0 47.473871-51.441536 35 35 0 1 0-47.473871 51.441536Z" fill="#FFC831"/><path d="M387.5 772.9c-11.5 0-22.3-4.3-30.8-12.1-8.9-8.2-14.1-19.5-14.6-31.6-0.5-12.1 3.8-23.7 12-32.7 8.2-8.9 19.5-14.1 31.6-14.6 12-0.5 23.7 3.8 32.7 12 8.9 8.2 14.1 19.5 14.6 31.6 0.5 12.2-3.8 23.8-12 32.7s-19.5 14.1-31.6 14.6c-0.6 0.1-1.3 0.1-1.9 0.1z m0.1-70h-1c-6.5 0.3-12.6 3.1-17 7.9-9.2 9.9-8.5 25.5 1.4 34.6 10 9.2 25.5 8.5 34.6-1.4 4.4-4.8 6.7-11.1 6.5-17.6-0.3-6.5-3-12.6-7.9-17-4.6-4.3-10.4-6.5-16.6-6.5z" fill="#7F0518"/></symbol><symbol id="icon-laohu" viewbox="0 0 1024 1024"><path d="M936.7 240.6c32.6 64.2-0.6 146.6-74.1 183.9-73.5 37.3-159.5 15.4-192.1-48.8-32.6-64.2 0.6-146.6 74.1-183.9 73.5-37.3 159.5-15.4 192.1 48.8z" fill="#FFC831"/><path d="M788.1 453.6c-13.4 0-26.6-1.6-39.5-4.9-39.4-10-70.6-34.2-87.8-68.1-17.2-33.9-18.4-73.4-3.2-111.1 15-37.2 44.1-68.3 82-87.5 78.8-40 171.5-15.9 206.8 53.6 35.3 69.5-0.1 158.6-78.9 198.6-25.3 12.9-52.5 19.4-79.4 19.4z m31.1-269c-23 0-47 5.5-69.7 17-33.2 16.8-58.7 43.9-71.7 76.2-12.8 31.8-12 64.8 2.4 93 14.3 28.2 40.5 48.4 73.7 56.8 33.8 8.6 70.6 4 103.8-12.8 68-34.5 99.1-110.4 69.3-169.2-19.9-39.2-61.9-61-107.8-61z" fill="#7F0518"/><path d="M773.7 402.6c-26.2 0-48.2-10.8-60.2-29.7-21.7-34.2-4.3-84.3 38.8-111.7 17.9-11.4 37.8-17.4 57.4-17.4 26.3 0 48.2 10.8 60.2 29.7 21.7 34.2 4.3 84.3-38.8 111.7-17.9 11.3-37.7 17.4-57.4 17.4z" fill="#FF6A48"/><path d="M809.8 254.7c22.4 0 41 9 50.9 24.6 18.5 29.1 2.6 72.4-35.5 96.6-15.9 10.1-34.2 15.7-51.6 15.7-22.4 0-41-9-51-24.6-18.5-29.1-2.6-72.4 35.5-96.6 16-10.2 34.4-15.7 51.7-15.7m0-21.9c-20.8 0-43 6.2-63.3 19.1-48.3 30.7-67.2 87.5-42.2 126.8 14.5 22.8 40.6 34.8 69.4 34.8 20.8 0 43-6.2 63.3-19.1 48.3-30.7 67.2-87.5 42.2-126.8-14.5-22.8-40.6-34.8-69.4-34.8z" fill="#7F0518"/><path d="M87.5 240.6c-32.6 64.2 0.6 146.6 74.1 183.9 73.5 37.3 159.5 15.4 192.1-48.8 32.6-64.2-0.6-146.6-74.1-183.9-73.5-37.3-159.5-15.4-192.1 48.8z" fill="#FFC831"/><path d="M236.1 453.6c-26.9 0-54.2-6.6-79.5-19.4-78.7-40-114.1-129-78.9-198.6 35.3-69.5 128-93.6 206.8-53.6 78.8 40 114.1 129.1 78.9 198.6-17.2 33.9-48.4 58.1-87.8 68.1-12.8 3.3-26.1 4.9-39.5 4.9zM97.2 245.5c-29.8 58.8 1.3 134.7 69.3 169.2 33.2 16.8 70 21.4 103.7 12.8 33.2-8.4 59.4-28.6 73.7-56.8 29.8-58.8-1.3-134.7-69.3-169.2-67.9-34.5-147.6-14.7-177.4 44z" fill="#7F0518"/><path d="M250.5 402.6c-19.7 0-39.5-6-57.4-17.4-43.1-27.4-60.6-77.5-38.9-111.7 12-18.9 33.9-29.7 60.2-29.7 19.7 0 39.5 6 57.4 17.4 43.1 27.4 60.6 77.5 38.8 111.7-11.9 18.8-33.9 29.7-60.1 29.7z" fill="#FF6A48"/><path d="M214.4 254.7c17.3 0 35.6 5.6 51.6 15.7 38.1 24.2 54 67.5 35.5 96.6-9.9 15.7-28.5 24.6-51 24.6-17.3 0-35.6-5.6-51.6-15.7-38-24.2-54-67.5-35.5-96.6 10-15.7 28.6-24.6 51-24.6m0-21.9c-28.8 0-54.9 11.9-69.4 34.8-25 39.3-6.1 96.1 42.2 126.8 20.3 12.9 42.5 19.1 63.3 19.1 28.8 0 54.9-11.9 69.4-34.8 25-39.3 6.1-96.1-42.2-126.8-20.3-12.8-42.5-19.1-63.3-19.1z" fill="#7F0518"/><path d="M907.2 539.1c0 180.8-179.4 327.4-400.8 327.4S105.6 719.9 105.6 539.1c0-180.8 179.4-327.3 400.8-327.3 221.4-0.1 400.8 146.5 400.8 327.3z" fill="#FFC831"/><path d="M506.4 877.3c-227 0-411.7-151.8-411.7-338.3s184.7-338.3 411.7-338.3S918.1 352.5 918.1 539c0 186.6-184.7 338.3-411.7 338.3z m0-654.7c-215 0-389.9 141.9-389.9 316.4 0 174.5 174.9 316.4 389.9 316.4s389.9-142 389.9-316.4c0-174.4-174.9-316.4-389.9-316.4z" fill="#7F0518"/><path d="M683.7 500.4m-69.9 0a69.9 69.9 0 1 0 139.8 0 69.9 69.9 0 1 0-139.8 0Z" fill="#7F0518"/><path d="M666.1 486.3m-32.2 0a32.2 32.2 0 1 0 64.4 0 32.2 32.2 0 1 0-64.4 0Z" fill="#FFFFFF"/><path d="M707.4 533.2m-14.7 0a14.7 14.7 0 1 0 29.4 0 14.7 14.7 0 1 0-29.4 0Z" fill="#FFFFFF"/><path d="M334.1 500.4m-69.9 0a69.9 69.9 0 1 0 139.8 0 69.9 69.9 0 1 0-139.8 0Z" fill="#7F0518"/><path d="M316.5 486.3m-32.2 0a32.2 32.2 0 1 0 64.4 0 32.2 32.2 0 1 0-64.4 0Z" fill="#FFFFFF"/><path d="M357.8 533.2m-14.7 0a14.7 14.7 0 1 0 29.4 0 14.7 14.7 0 1 0-29.4 0Z" fill="#FFFFFF"/><path d="M727.8 400.5c-2.6 0-5.3-1-7.4-2.9-13.7-12.6-27.7-18.5-40.4-17.7-19 1.3-31.8 16.4-31.9 16.6-3.9 4.7-10.7 5.3-15.4 1.5-4.6-3.8-5.4-10.6-1.6-15.3 0.7-0.9 18.6-22.5 47-24.5 19.4-1.3 38.7 6.4 57 23.4 4.4 4.1 4.7 11 0.7 15.4-2.1 2.3-5 3.5-8 3.5z" fill="#7F0518"/><path d="M297.4 400.5c-2.4 0-4.9-0.8-6.9-2.4-4.7-3.8-5.4-10.7-1.6-15.4 0.7-0.9 18.6-22.5 47-24.5 19.3-1.3 38.7 6.4 57 23.4 4.4 4.1 4.7 11 0.7 15.4-4.1 4.5-11 4.8-15.5 0.6-13.7-12.6-27.1-18.5-40.7-17.6-18.8 1.4-31.5 16.3-31.6 16.5-2.1 2.6-5.3 4-8.4 4z" fill="#7F0518"/><path d="M575.9 627.3c0 23.6-27.4 42.8-61.2 42.8-33.8 0-61.2-19.2-61.2-42.8 0-23.7 27.4-42.8 61.2-42.8 33.8-0.1 61.2 19.1 61.2 42.8z" fill="#7F0518"/><path d="M449.5 754.1c-4.4 0-8.8-0.4-13.1-1.2-40.2-7.5-60.5-47.6-61.4-49.3-2.7-5.4-0.5-11.9 4.9-14.6 5.4-2.7 12-0.5 14.7 4.9 0.2 0.3 16.6 32.2 46 37.6 19.2 3.6 40.4-4.7 63.2-24.4v-52.5c0-6 4.9-10.9 10.9-10.9s10.9 4.9 10.9 10.9V712c0 3.1-1.3 6-3.6 8.1-24.8 22.6-49.1 34-72.5 34z" fill="#7F0518"/><path d="M580 754.1c-23.3 0-47.7-11.4-72.6-34.1-4.5-4.1-4.8-11-0.7-15.4s11-4.8 15.4-0.7c24.2 22 46.6 31.3 66.8 27.5 29.5-5.4 45.8-37.3 46-37.6 2.7-5.4 9.3-7.5 14.7-4.9 5.4 2.7 7.6 9.2 4.9 14.6-0.9 1.7-21.2 41.8-61.4 49.3-4.4 0.9-8.7 1.3-13.1 1.3z" fill="#7F0518"/><path d="M885.8 442.6c-47.6 31.5-53.1 33.3-94.3 33.4-5.2 0-12 2.4-11.9 7.6 0.1 4.2 4.8 6.4 8.8 7.6 29.9 8.3 63.7 11.1 121.3-22.2M895.1 501.1c-48.9 29.5-75.7 39.4-116.8 37.8-5.2-0.2-12.1 1.9-12.2 7.1-0.1 4.2 4.5 6.6 8.5 7.9 29.5 9.5 81.7 7.1 140.6-23.7" fill="#7F0518"/><path d="M129 442.6c47.6 31.5 53.1 33.3 94.3 33.4 5.2 0 12 2.4 11.9 7.6-0.1 4.2-4.8 6.4-8.8 7.6-29.9 8.3-63.7 11.1-121.3-22.2M119.7 501.1c48.9 29.5 75.7 39.4 116.8 37.8 5.2-0.2 12.1 1.9 12.2 7.1 0.1 4.2-4.5 6.6-8.5 7.9-29.5 9.5-81.7 7.1-140.6-23.7" fill="#7F0518"/><path d="M404.7 313.6c86.5-36.1 136.4-33.4 212.2 7.5 7.1 3.8 12.7 10.2 9.6 13.5-1.7 1.7-5.8 4.2-13.7 0.5-9.8-4.7-21.1-9.8-38.2-12.5-51-8.2-92.4-12.1-163.7 8.4-4.3 1.2-17.4 6.7-20.1 0.1-1.9-4.6-2.2-9.7 13.9-17.5z" fill="#7F0518"/><path d="M390.7 264.2c96.6-35.9 152.3-33 237.1 8.1 7.9 3.8 14.2 10.3 10.8 13.5-1.8 1.7-6.5 4.2-15.3 0.4-11-4.7-23.6-9.8-42.8-12.7-57-8.4-103.3-12.4-182.9 8-4.8 1.2-19.4 6.6-22.4 0-2.1-4.4-2.5-9.4 15.5-17.3z" fill="#7F0518"/><path d="M433.9 354.2c45.9-17.2 93.5-26.9 156.7 5.8 7.8 4 14.5 14.8 11 18-1.8 1.7-6.5 4.2-15.3 0.4-11-4.7-73.4-23.6-148-2.7-4.8 1.3-19.4 6.6-22.4 0-2-4.5 0-13.7 18-21.5z" fill="#7F0518"/><path d="M492.6 239.3c0.9 34.1 1.7 68.2 2.6 102.4 0.2 6.4 0.8 13.5 7.5 17.7 12.4-6.1 14.6-18.2 15.2-28.8 2-31.7 0-54.3 3.1-90.3" fill="#7F0518"/></symbol><symbol id="icon-tuzi" viewbox="0 0 1024 1024"><path d="M783.7 527.8S1008.8 166.9 876 115C743.1 63.1 610.2 455.4 610.2 455.4l173.5 72.4z" fill="#FFFFFF"/><path d="M783.7 537.9c-1.3 0-2.6-0.3-3.9-0.8l-173.5-72.4c-4.9-2.1-7.4-7.6-5.7-12.6 4-11.8 99.5-290.2 213-343.1 22.7-10.5 44.9-11.7 66.1-3.5 21 8.2 35.4 23.6 42.7 45.7C959.5 263 799.1 522.1 792.3 533.1c-1.9 3.1-5.2 4.8-8.6 4.8zM623 449.8l156.6 65.3c26-43.1 154.5-264.3 123.6-357.4-5.4-16.3-15.5-27.2-30.9-33.2-16-6.3-32.4-5.3-50.1 3-95 44.2-181.8 273.9-199.2 322.3z" fill="#7F0518"/><path d="M766.6 462.4s137.6-228.3 72.3-261.1c-65.3-32.8-157.3 215.3-157.3 215.3l85 45.8z" fill="#FFC831"/><path d="M766.6 472.6c-1.6 0-3.3-0.4-4.8-1.2l-85-45.8c-4.5-2.4-6.5-7.7-4.7-12.5 7.4-20 74.5-196.6 138.4-221.7 11.6-4.6 22.7-4.3 33 0.9 10.1 5.1 17 13.8 20.5 25.9 19.4 67.2-77.6 231-88.7 249.5-1.9 3.1-5.3 4.9-8.7 4.9z m-72.3-60.7l68.6 36.9c31.4-53.8 95.3-178 81.7-225.1-1.9-6.6-5.2-10.9-10.2-13.4-5-2.5-10.2-2.6-16.4-0.1-44.8 17.7-101.7 144.5-123.7 201.7z" fill="#7F0518"/><path d="M240.3 527.8S15.2 166.9 148 115c132.9-51.9 265.8 340.4 265.8 340.4l-173.5 72.4z" fill="#FFFFFF"/><path d="M240.3 537.9c-3.4 0-6.7-1.7-8.6-4.8-6.8-11-167.2-270-130.1-381.9 7.3-22.1 21.7-37.5 42.7-45.7 21.2-8.3 43.4-7.1 66.1 3.5 113.5 52.9 208.9 331.3 213 343.1 1.7 5-0.8 10.6-5.7 12.6l-173.5 72.4c-1.3 0.6-2.6 0.8-3.9 0.8z m-67.6-417.5c-7.1 0-14.1 1.3-21 4-15.4 6-25.5 16.9-30.9 33.2-30.8 93.2 97.7 314.3 123.6 357.5L401 449.8c-17.4-48.4-104.2-278.1-199.2-322.3-10-4.7-19.7-7.1-29.1-7.1z" fill="#7F0518"/><path d="M257.4 462.4s-137.6-228.3-72.3-261.1c65.3-32.8 157.3 215.3 157.3 215.3l-85 45.8z" fill="#FFC831"/><path d="M257.4 472.6c-3.4 0-6.8-1.8-8.7-4.9-11.1-18.5-108.2-182.3-88.7-249.5 3.5-12.1 10.4-20.8 20.5-25.9 10.3-5.2 21.4-5.4 33-0.9 63.9 25.1 130.9 201.6 138.4 221.7 1.8 4.7-0.2 10.1-4.7 12.5l-84.9 45.8c-1.6 0.8-3.2 1.2-4.9 1.2z m-59.9-264.1c-2.7 0-5.3 0.6-7.9 1.9-5 2.5-8.3 6.8-10.2 13.4-13.6 47.1 50.3 171.2 81.7 225.1l68.6-36.9c-22.1-57.2-78.9-184-123.6-201.6-3.1-1.3-5.9-1.9-8.6-1.9z" fill="#7F0518"/><path d="M871.3 654.7c0.2 180.4-162.4 254.9-363 255.1-200.6 0.2-363.3-74.1-363.5-254.5-0.1-180.4 167.2-366.7 367.8-366.9 200.6-0.1 358.5 185.9 358.7 366.3z" fill="#FFFFFF"/><path d="M507.5 919.9c-107.2 0-197.6-21.1-261.6-61.1-73.8-46.1-111.3-114.6-111.3-203.5-0.1-177.8 161.5-376.8 378-377h0.3c210.8 0 368.4 198.6 368.6 376.4 0.2 165.9-139.4 265.1-373.2 265.3-0.3-0.1-0.5-0.1-0.8-0.1z m5.3-621.3h-0.3c-165.5 0.2-357.8 156-357.7 356.7 0.1 81.5 34.3 144.2 101.8 186.3 60.7 38 147.5 58 250.9 58h0.7c106.2-0.1 353.1-24.2 352.9-244.9-0.2-168.2-149.1-356.1-348.3-356.1z" fill="#7F0518"/><path d="M678.5 568m-68.2 0a68.2 68.2 0 1 0 136.4 0 68.2 68.2 0 1 0-136.4 0Z" fill="#7F0518"/><path d="M661.3 554.3m-31.4 0a31.4 31.4 0 1 0 62.8 0 31.4 31.4 0 1 0-62.8 0Z" fill="#FFFFFF"/><path d="M701.6 600m-14.3 0a14.3 14.3 0 1 0 28.6 0 14.3 14.3 0 1 0-28.6 0Z" fill="#FFFFFF"/><path d="M337.5 568m-68.2 0a68.2 68.2 0 1 0 136.4 0 68.2 68.2 0 1 0-136.4 0Z" fill="#7F0518"/><path d="M320.4 554.3m-31.4 0a31.4 31.4 0 1 0 62.8 0 31.4 31.4 0 1 0-62.8 0Z" fill="#FFFFFF"/><path d="M360.6 600m-14.3 0a14.3 14.3 0 1 0 28.6 0 14.3 14.3 0 1 0-28.6 0Z" fill="#FFFFFF"/><path d="M635.5 470.1c-2.2 0-4.5-0.7-6.4-2.3-4.4-3.5-5-9.9-1.5-14.3 0.7-0.9 18-21.7 45.5-23.7 18.8-1.3 37.4 6.2 55.2 22.6 4.1 3.8 4.4 10.2 0.6 14.3-3.8 4.1-10.2 4.4-14.4 0.6-13.5-12.4-26.6-18.3-40-17.3-18.6 1.3-31.1 16.1-31.2 16.3-2 2.5-4.9 3.8-7.8 3.8z" fill="#7F0518"/><path d="M301.7 470.1c-2.2 0-4.5-0.7-6.4-2.3-4.4-3.5-5-9.9-1.5-14.3 0.7-0.9 18-21.7 45.5-23.7 18.8-1.3 37.4 6.2 55.2 22.6 4.1 3.8 4.4 10.2 0.6 14.3-3.8 4.1-10.2 4.4-14.4 0.6-13.5-12.4-26.5-18.3-40-17.3-18.6 1.3-31.1 16.1-31.2 16.3-1.9 2.5-4.9 3.8-7.8 3.8z" fill="#7F0518"/><path d="M571.6 674.4c0 23.1-26.7 41.8-59.7 41.8s-59.6-18.7-59.6-41.8c0-23.1 26.7-41.8 59.6-41.8s59.7 18.8 59.7 41.8z" fill="#7F0518"/><path d="M459 796c-5.1 0-9.9-0.9-14.4-2.8-27.8-11.3-30.8-52-31.1-56.6-0.3-5.6 3.9-10.4 9.5-10.7 6.1-0.3 10.4 4 10.7 9.5 0.5 8.4 5 33.5 18.6 39 10.8 4.4 28.3-3.4 49.5-22V701c0-5.6 4.5-10.1 10.1-10.1S522 695.4 522 701v56c0 2.9-1.2 5.6-3.3 7.5-23.1 21.1-42.8 31.5-59.7 31.5z" fill="#7F0518"/><path d="M564.4 796c-16.5 0-36.1-10.4-59.2-31.5-4.1-3.8-4.5-10.2-0.7-14.3 3.8-4.1 10.2-4.4 14.3-0.7 22.7 20.7 41.2 29.5 51.9 24.9 12.9-5.4 16.6-30.6 16.9-39 0.2-5.5 4.7-9.8 10.1-9.8h0.3c5.6 0.2 10 4.9 9.8 10.5-0.2 4.6-2.2 45.5-29.3 57-4.4 1.9-9.1 2.9-14.1 2.9z" fill="#7F0518"/><path d="M701.9 682.4a62.2 40.7 0 1 0 124.4 0 62.2 40.7 0 1 0-124.4 0Z" fill="#FF6A48"/><path d="M197.7 682.4a62.2 40.7 0 1 0 124.4 0 62.2 40.7 0 1 0-124.4 0Z" fill="#FF6A48"/></symbol><symbol id="icon-long" viewbox="0 0 1024 1024"><path d="M619.5 320.6c-1.1-0.2-2.3-0.4-3.4-0.8-10.4-3.5-16-14.8-12.4-25.2 1.6-4.9 41.6-120.7 141.2-193.9 8.9-6.5 21.3-4.6 27.8 4.3 6.5 8.8 4.6 21.3-4.2 27.8-89.6 65.8-126.8 173.5-127.1 174.5-3.3 9.2-12.6 14.7-21.9 13.3z" fill="#7F0518"/><path d="M784.4 243.3c-7-1.1-13.1-5.8-15.7-12.8-0.8-2-18.1-46.1-62.9-49-10.9-0.6-19.3-10-18.7-21s10.1-19.3 21-18.7c72.3 4.1 96.9 72.2 97.9 75.1 3.7 10.3-1.6 21.7-12 25.4-3.1 1.2-6.4 1.5-9.6 1zM720.1 280.9c-7.3-1.1-13.7-6.3-16-13.8-0.9-2.7-9.2-24.6-38.8-24.6-10.8 0.1-19.9-8.9-19.9-19.8 0-11 8.9-19.9 19.8-19.9 48.5-0.1 71.5 34.5 76.9 52.7 3.1 10.5-2.9 21.6-13.4 24.7-2.9 0.9-5.8 1.1-8.6 0.7zM406 320.6c1.1-0.2 2.3-0.4 3.4-0.8 10.4-3.5 16-14.8 12.4-25.2-1.6-4.9-41.6-120.7-141.2-193.9-8.9-6.5-21.3-4.6-27.8 4.3-6.5 8.8-4.6 21.3 4.2 27.8 89.6 65.8 126.8 173.5 127.1 174.5 3.2 9.2 12.5 14.7 21.9 13.3z" fill="#7F0518"/><path d="M241 243.3c7-1.1 13.1-5.8 15.7-12.8 0.8-2 18.1-46.1 62.9-49 10.9-0.6 19.3-10 18.7-21-0.6-11-10.1-19.3-21-18.7-72.3 4.1-96.9 72.2-97.9 75.1-3.7 10.3 1.6 21.7 12 25.4 3.1 1.2 6.4 1.5 9.6 1zM305.3 280.9c7.3-1.1 13.7-6.3 16-13.8 0.9-2.7 9.2-24.6 38.8-24.6 10.8 0.1 19.9-8.9 19.9-19.8 0-11-8.9-19.9-19.8-19.9-48.5-0.1-71.5 34.5-76.9 52.7-3.1 10.5 2.9 21.6 13.4 24.7 2.9 0.9 5.8 1.1 8.6 0.7z" fill="#7F0518"/><path d="M623.1 913.1c-29.4-8.2-80.3-49.3-111-49.3s-81.6 41-111 49.3C281.8 946.5 165 817.8 174.7 702c5.7-67.5 58.7-201.3 74.1-267.4C277.1 312.7 379.5 223.5 504 223.5h16.1c124.5 0 228.3 90.3 255.2 211.1 14.7 66.3 68.4 200 74.1 267.4 9.8 115.8-107.1 244.5-226.3 211.1z" fill="#FFC831"/><path d="M661.5 928.6c-13.9 0-27.7-1.9-41.2-5.6-13.3-3.7-29.5-12.9-46.6-22.6-21.7-12.3-46.3-26.3-61.7-26.3-15.4 0-40 14-61.7 26.3-17.1 9.7-33.2 18.9-46.5 22.6-52.2 14.5-109.2 0.5-156.5-38.6-55.8-46.2-88.4-118.1-82.9-183.3 3.6-43.1 25.9-112 45.5-172.8 11.9-36.8 23.1-71.5 28.8-96.1 30-129 139.1-219.1 265.2-219.1H520c127.5 0 236.5 90.1 265.2 219.2 5.7 25.5 17.4 61.7 29.8 100 20.1 62.2 41 126.6 44.5 168.8 5.5 65.2-27.1 137.1-82.9 183.3-34.9 29-75.3 44.2-115.1 44.2z m-35.7-25.3c46.4 12.9 95.3 0.6 137.9-34.6 50.8-42 80.5-107.1 75.5-165.8-3.3-39.8-24.7-105.9-43.6-164.2-12.6-38.8-24.4-75.4-30.3-101.9-26.6-119.6-127.4-203.1-245.2-203.1H504c-116.6 0-217.4 83.6-245.2 203.2-5.9 25.5-17.3 60.6-29.3 97.8-19.3 59.7-41.2 127.4-44.6 168.2-4.9 58.7 24.7 123.7 75.5 165.7 42.6 35.2 91.6 47.6 137.9 34.6 10.9-3 26-11.6 41.9-20.7 25.1-14.3 51-29 71.8-29 20.8 0 46.7 14.7 71.8 29 16 9.1 31.1 17.7 42 20.8z" fill="#7F0518"/><path d="M681.7 484.1m-67.9 0a67.9 67.9 0 1 0 135.8 0 67.9 67.9 0 1 0-135.8 0Z" fill="#7F0518"/><path d="M664.6 470.3m-31.3 0a31.3 31.3 0 1 0 62.6 0 31.3 31.3 0 1 0-62.6 0Z" fill="#FFFFFF"/><path d="M704.7 515.9m-14.3 0a14.3 14.3 0 1 0 28.6 0 14.3 14.3 0 1 0-28.6 0Z" fill="#FFFFFF"/><path d="M342.4 484.1m-67.9 0a67.9 67.9 0 1 0 135.8 0 67.9 67.9 0 1 0-135.8 0Z" fill="#7F0518"/><path d="M325.3 470.3m-31.3 0a31.3 31.3 0 1 0 62.6 0 31.3 31.3 0 1 0-62.6 0Z" fill="#FFFFFF"/><path d="M365.4 515.9m-14.3 0a14.3 14.3 0 1 0 28.6 0 14.3 14.3 0 1 0-28.6 0Z" fill="#FFFFFF"/><path d="M638.9 386.7c-2.3 0-4.6-0.7-6.5-2.3-4.4-3.6-5.1-10-1.5-14.4 0.7-0.9 17.9-21.7 45.4-23.6 18.8-1.4 37.3 6.3 55.1 22.6 4.2 3.8 4.4 10.3 0.6 14.5-3.8 4.2-10.3 4.4-14.5 0.6-13.4-12.3-26.3-18.1-39.7-17.2-18.4 1.3-30.8 16-30.9 16.1-2 2.4-5 3.7-8 3.7z" fill="#7F0518"/><path d="M392.3 386.7c-2.5 0-5-0.9-6.9-2.7-13.3-12.3-26.5-18.2-39.5-17.2-18.6 1.2-31.1 16-31.2 16.2-3.6 4.3-10.1 5-14.4 1.4-4.4-3.6-5-10-1.5-14.4 0.7-0.9 18-21.7 45.4-23.6 18.7-1.4 37.3 6.3 55.1 22.6 4.2 3.8 4.4 10.3 0.6 14.5-2 2.1-4.8 3.2-7.6 3.2z" fill="#7F0518"/><path d="M650.9 776.9a41.8 27.4 0 1 0 83.6 0 41.8 27.4 0 1 0-83.6 0Z" fill="#FF6A48"/><path d="M692.7 814.6c-29.2 0-52.1-16.6-52.1-37.7s22.9-37.7 52.1-37.7 52.1 16.6 52.1 37.7-22.9 37.7-52.1 37.7z m0-54.9c-18.1 0-31.6 9.1-31.6 17.2s13.5 17.2 31.6 17.2 31.6-9.1 31.6-17.2c0-8.2-13.5-17.2-31.6-17.2z" fill="#7F0518"/><path d="M279 776.9a41.8 27.4 0 1 0 83.6 0 41.8 27.4 0 1 0-83.6 0Z" fill="#FF6A48"/><path d="M320.8 814.6c-29.2 0-52.1-16.6-52.1-37.7s22.9-37.7 52.1-37.7 52.1 16.6 52.1 37.7c-0.1 21.1-22.9 37.7-52.1 37.7z m0-54.9c-18.1 0-31.6 9.1-31.6 17.2s13.5 17.2 31.6 17.2 31.6-9.1 31.6-17.2c-0.1-8.2-13.6-17.2-31.6-17.2z" fill="#7F0518"/><path d="M404.8 309.3c8.4-2.9 15-9.7 21.9-15.7 6.9-6 15-11.4 23.8-10.7 11.3 1 19.4 11.8 29.4 17.7 12.9 7.6 29.8 6.3 41.6-3.1 7-5.6 12.7-14 21.3-15.8 11.7-2.4 21.6 8.4 31.3 15.7 24.7 18.5 73 11.8 84.2-6.6 9.3-15.2 9.4-32.5-0.7-42.6-8.9-8.9-23.4-10.3-30.1-21.1-3.4-5.5-4.7-12.3-6.9-18.5-11.3-32-30.7-11.3-42.1-30.6-3.1-5.3 0.8-14.8-11.1-24.6-8.8-7.3-39.8 11.9-56.5-16.5-4.9 14.2-23.6 22-32.3 25.1-15.6 5.7-27-9.2-39.9 1.9-8.5 7.2-8 21-12.5 31.6-10.4 24.1-29.1 9.1-48.4 24.1-9.3 7.3-17 20.9-17.5 33.3-0.5 12.3 0.2 23.3 6.1 33.9 5.6 10.2 26.8 26.4 38.4 22.5z" fill="#FF6A48"/><path d="M401.1 320.1c-16.9 0-37.4-16.8-43.7-28.3-7.3-13.3-7.9-26.8-7.3-39.3 0.6-14.7 9.4-31.5 21.5-40.9 10.5-8.2 20.8-9.4 29-10.3 9.2-1.1 12.7-1.4 16.3-9.8 1.4-3.2 2.2-6.8 3-10.3 2-8.5 4.3-18.1 12.3-25 11.1-9.5 22.5-6.6 30.1-4.6 5.6 1.5 9.2 2.3 13 0.9 19.5-7.2 24.8-14.9 26.1-18.8 1.3-3.8 4.7-6.5 8.7-6.8 4.3-0.4 7.9 1.6 9.9 5 7.1 12 16.5 12 31.1 10.4 8.2-0.9 16.8-1.8 23.1 3.5 11.2 9.2 12.4 19 13.1 24.9 0.1 1 0.2 2 0.5 2.8 2.1 3.5 4 3.9 10.3 4.8 9.5 1.3 23.9 3.2 32.4 27.3 0.7 2 1.3 4.1 2 6.2 1.2 3.9 2.3 7.6 4 10.3 2.2 3.6 6.9 5.9 12.3 8.6 5.3 2.6 11.3 5.6 16.4 10.6 13.4 13.3 14.3 35.5 2.3 55.2-6.1 10-19 17.4-36.3 20.7-18.3 3.5-44.5 2.4-62.9-11.3-2-1.5-4-3.1-6-4.7-6.1-5-12.4-10.2-17.1-9.2-3.1 0.6-6.5 4-10.2 7.5-2.2 2.2-4.4 4.3-6.8 6.2-15.2 12.2-36.6 13.8-53.3 4-3.8-2.3-7.5-5.1-11-8-5.2-4.2-9.8-7.9-14.1-8.3-3.8-0.4-9.4 2.3-16.2 8.2l-3.3 2.9c-6.1 5.5-13 11.7-22 14.7-2.4 0.6-4.8 0.9-7.2 0.9z m3.7-10.8h0.3-0.3zM449.6 170c-1.7 0-2.8 0.5-4.2 1.7-2.9 2.5-4.2 8.1-5.7 14.1-1.1 4.7-2.3 9.4-4.1 13.7-8.3 19.3-22.5 20.9-32.8 22.1-6.8 0.8-12.7 1.4-18.7 6.1-7.4 5.8-13.3 16.8-13.6 25.6-0.5 11 0.2 20.1 4.8 28.5 4.6 8.4 21.4 19 26 17.7 5-1.7 9.8-6 14.9-10.6l3.5-3.1c7.1-6.2 18.1-14.2 31.5-13.1 10.6 1 18.3 7.2 25.2 12.8 2.8 2.3 5.6 4.5 8.5 6.3 9.2 5.4 21.6 4.5 30-2.3 1.8-1.5 3.6-3.2 5.3-4.9 5.3-5.2 11.4-11.1 20.3-13 14.3-3 25.3 6.1 34.3 13.4 1.8 1.4 3.5 2.9 5.3 4.2 10.7 8 29 11 46.7 7.6 13.2-2.5 20.4-7.6 22.6-11.2 6.9-11.2 7.2-23.6 0.8-30-2.7-2.7-6.7-4.7-11-6.8-7.2-3.6-15.3-7.6-20.6-16.2-3.1-5-4.7-10.4-6.1-15.2-0.5-1.8-1.1-3.5-1.7-5.2-4.3-12.2-8.1-12.7-15.8-13.7-7.2-1-18-2.4-25.5-15.1-2.1-3.5-2.5-7.1-2.9-10.3-0.5-4.4-0.9-7.6-5.9-11.6-0.2 0.3-4.6 0.8-7.8 1.1-10.9 1.2-27.6 3-41.2-8.5-6.7 7-16.7 12.9-29.7 17.6-10.1 3.7-18.9 1.4-25.2-0.3-3.4-0.8-5.5-1.4-7.2-1.4z" fill="#7F0518"/><path d="M866.5 705.5c-25.8 0-49.8-6.5-61.2-11.6-5.2-2.3-7.5-8.4-5.2-13.6 2.3-5.2 8.4-7.5 13.6-5.2 14.8 6.6 57.8 16.6 89.5 3.3 16.1-6.8 27-18.4 33.3-35.5 7.9-21.7-3.4-39.9-18.2-48.3-5.2-3-16.9-7.1-27.7-4.1-6.7 1.9-11.8 6.4-15.6 13.6-4.1 7.6-3.2 15.2 2.4 20.4 4.9 4.5 16.7 3.6 21.8-1.8 4-4.1 10.4-4.2 14.5-0.3 4.1 3.9 4.2 10.4 0.3 14.5-12.9 13.5-37.6 14.9-50.7 2.6-12.4-11.5-14.9-29.2-6.5-45 6.4-12 16.1-20.2 28-23.6 16.3-4.7 33.6 0.3 43.6 6 21.6 12.3 39.3 40.4 27.3 73.2-8.3 22.5-23.2 38.4-44.6 47.4-14 5.8-29.6 8-44.6 8z" fill="#7F0518"/><path d="M156.7 706.3c-15 0-30.6-2.2-44.6-8.1-21.3-9-36.3-24.9-44.6-47.4-12-32.8 5.7-60.9 27.3-73.2 9.9-5.7 27.4-10.7 43.6-6 11.9 3.4 21.6 11.6 28 23.6 8.4 15.8 5.9 33.5-6.5 45-13 12.2-37.6 11-50.7-2.6-3.9-4.1-3.8-10.6 0.3-14.5 4.1-3.9 10.6-3.8 14.5 0.3 5.1 5.4 16.9 6.3 21.8 1.8 5.6-5.2 6.4-12.8 2.4-20.4-3.8-7.2-8.9-11.6-15.6-13.5-10.8-3.2-22.5 1.1-27.8 4.1-14.8 8.4-26.1 26.6-18.2 48.3 6.3 17.1 17.2 28.8 33.3 35.5 31.7 13.4 74.7 3.4 89.4-3.3 5.1-2.4 11.2 0 13.5 5.2 2.3 5.2 0 11.2-5.2 13.6-11.1 5.1-35.1 11.6-60.9 11.6z" fill="#7F0518"/></symbol><symbol id="icon-she" viewbox="0 0 1024 1024"><path d="M536.2 800.4h-50.8c-141.8 0-201.8-127.5-257.8-257.8C83.7 207.5 375 98.5 516.7 103.8c170 6.4 408.6 84.4 277.4 438.7-49.3 133-141.8 257.9-257.9 257.9z" fill="#FF6A48"/><path d="M536.2 809.8h-50.8c-153.3 0-216-146.1-266.5-263.5-54.4-126.7-53.2-232.8 3.5-315.5C294.8 125.3 438.8 91.4 517.1 94.4c77.3 2.9 217.1 22.9 285.1 124.6 52 77.8 52.2 187.7 0.8 326.7-47.4 127.7-142.3 264.1-266.8 264.1z m-29-696.7c-76.1 0-203.9 33.1-269.1 128.3-52.9 77.1-53.4 177.1-1.7 297.5 61.3 142.8 118.6 252 249.1 252h50.8c114.8 0 203.9-130 249-251.7 49.3-133.1 49.7-237.2 1.3-309.7C723.1 134.8 590 116 516.4 113.3c-3-0.2-6.1-0.2-9.2-0.2z" fill="#7F0518"/><path d="M517.6 916.8c-15 0-27.4-6.9-36.1-19.8-10.3 9.8-21.2 12.2-29.5 12.2-4.1 0-8.5-0.6-12.8-1.8-42.1-11.6-42.3-59.8-36.4-83.6 1-4.2 4.8-7.2 9.1-7.2h0.9c4.6 0.4 8.3 4.2 8.5 8.9 0.1 1.6 2.6 40 29.9 40.9 18.5 0 28.4-57.5 28.4-99 0-2.6 1.1-5.1 3-6.9 1.7-1.6 4-2.5 6.4-2.5 0.2 0 16.7 1.3 16.7 1.3 4.6 0.4 8.3 4 8.6 8.7 2.1 27.1-3.7 60.3-6.7 78.1l-1.3 7.9c-0.8 5.4 0.6 11 3.7 15.1 1.5 2 4.1 4.5 7.8 5 1.3 0.2 2.6 0.3 3.9 0.3 24.2 0 32.3-35.3 32.4-35.7 1-4.3 4.8-7.4 9.2-7.4h0.7c4.7 0.3 8.4 4 8.7 8.7 1.8 24.5-6.2 72-49.7 76.5-1.9 0.2-3.7 0.3-5.4 0.3z" fill="#FFC831"/><path d="M489 767.4l15.9 1.3c2.4 31.2-6.4 72.8-8 84-2 14.3 6.6 29 19.6 30.8 1.8 0.2 3.5 0.3 5.1 0.3 32.1 0 41.6-43.1 41.6-43.1s4.6 61.7-41.3 66.4c-1.5 0.2-2.9 0.2-4.3 0.2-16.3 0-27.8-10.1-34.3-27.6-8 12.8-18.6 19.9-31.3 19.9-3.3 0-6.8-0.5-10.3-1.5-44.4-12.2-29.8-72.3-29.8-72.3s2.5 48.6 39 49.8h0.6c37.3 0.2 37.5-108.2 37.5-108.2m0-18.8c-4.7 0-9.3 1.8-12.7 5-3.9 3.6-6.1 8.6-6.1 13.8-0.1 45.1-10.5 85.9-18.9 89.7-18.4-0.6-20.6-31.7-20.6-32-0.5-9.3-7.8-16.9-17.1-17.8-0.6-0.1-1.2-0.1-1.8-0.1-8.6 0-16.2 5.9-18.3 14.4-6.6 26.9-6 81.4 43.1 94.9 5.2 1.4 10.3 2.1 15.3 2.1 10.1 0 19.6-2.9 28-8.5 9.9 10.4 22.9 16.1 37.6 16.1 2 0 4.1-0.1 6.3-0.3 50.6-5.2 60.1-58.9 58.1-86.6-0.7-9.3-8.1-16.7-17.4-17.4h-1.4c-8.8 0-16.5 6.1-18.4 14.8 0 0.2-7 28.3-23.2 28.3-0.8 0-1.7-0.1-2.6-0.2-0.2 0-0.9-0.4-1.5-1.3-1.6-2.1-2.3-5.3-1.9-8.1 0.3-1.8 0.7-4.4 1.3-7.6 3.2-18.2 9-52.2 6.9-80.4-0.7-9.2-8-16.6-17.2-17.3l-15.9-1.3c-0.6-0.2-1.1-0.2-1.6-0.2z" fill="#7F0518"/><path d="M702.5 427m-62.7 0a62.7 62.7 0 1 0 125.4 0 62.7 62.7 0 1 0-125.4 0Z" fill="#7F0518"/><path d="M686.7 414.3m-28.9 0a28.9 28.9 0 1 0 57.8 0 28.9 28.9 0 1 0-57.8 0Z" fill="#FFFFFF"/><path d="M723.7 456.4m-13.2 0a13.2 13.2 0 1 0 26.4 0 13.2 13.2 0 1 0-26.4 0Z" fill="#FFFFFF"/><path d="M329.6 427m-62.7 0a62.7 62.7 0 1 0 125.4 0 62.7 62.7 0 1 0-125.4 0Z" fill="#7F0518"/><path d="M313.8 414.3m-28.9 0a28.9 28.9 0 1 0 57.8 0 28.9 28.9 0 1 0-57.8 0Z" fill="#FFFFFF"/><path d="M350.8 456.4m-13.2 0a13.2 13.2 0 1 0 26.4 0 13.2 13.2 0 1 0-26.4 0Z" fill="#FFFFFF"/><path d="M662.9 336.9c-2.1 0-4.2-0.7-5.9-2.1-4-3.3-4.7-9.2-1.4-13.3 0.7-0.8 16.6-20 41.9-21.8 17.6-1.4 34.5 5.8 50.9 20.8 3.8 3.5 4.1 9.5 0.6 13.3-3.5 3.9-9.5 4.1-13.3 0.6-12.4-11.4-24.7-16.9-36.8-15.9-17.1 1.2-28.6 14.8-28.7 14.9-1.8 2.4-4.6 3.5-7.3 3.5z" fill="#7F0518"/><path d="M296.6 336.9c-2.1 0-4.2-0.7-5.9-2.1-4-3.3-4.7-9.2-1.4-13.3 0.7-0.8 16.6-20 41.9-21.8 17.7-1.4 34.5 5.8 50.9 20.8 3.8 3.5 4.1 9.5 0.6 13.3-3.5 3.9-9.5 4.1-13.3 0.6-12.4-11.4-24.8-16.9-36.8-15.9-17.1 1.2-28.6 14.8-28.7 14.9-1.9 2.4-4.6 3.5-7.3 3.5z" fill="#7F0518"/><path d="M566.6 653.8c-21.2-0.8 65.2-52.5 73.8 18.7 2.9 23.1-9.4-16.2-73.8-18.7z" fill="#7F0518"/><path d="M457.8 644.2c21.2-0.8-65.2-52.5-73.8 18.7-2.9 23.1 9.4-16.3 73.8-18.7z" fill="#7F0518"/><path d="M510 295.1s68.1-11.4 158.4-159.6c-48.5-21.3-103.8-29.8-152.7-31.7-36-1.4-82.9 5.6-128.6 23.2 27.2 59.8 70.5 137.3 122.9 168.1z" fill="#EE3E2B"/><path d="M509.9 304.5c-1.7 0-3.3-0.4-4.8-1.3-54.4-32.1-98.9-111.4-126.7-172.3-1.1-2.4-1.2-5.1-0.1-7.5 1-2.4 2.9-4.3 5.3-5.2C427 101.6 475.5 92.9 516 94.4c41 1.5 101.3 8.4 156.1 32.4 2.5 1.1 4.4 3.2 5.2 5.8 0.8 2.6 0.5 5.4-0.9 7.7-91.4 150.2-161.9 163.5-164.9 164-0.5 0.2-1 0.2-1.6 0.2z m-110-172.2C426 187.9 465.3 255.7 511.4 285c13.6-4.5 70.4-29.2 143.1-145-49.4-19.5-102.4-25.3-139.2-26.7-35.4-1.3-76.9 5.5-115.4 19z" fill="#7F0518"/></symbol><symbol id="icon-ma" viewbox="0 0 1024 1024"><path d="M356.5 381.1c12.3-3.9 21.9-13.2 32-21.3 10-8.1 22-15.6 34.8-14.5 16.6 1.4 28.4 16.1 43 24.1 18.8 10.3 43.6 8.6 60.8-4.3 10.2-7.6 18.6-19.1 31.1-21.5 17.1-3.3 31.5 11.5 45.8 21.4 36.1 25.1 106.7 16 123.1-8.9 13.5-20.7 13.7-44.2-1.1-57.9-13-12-34.2-14-44-28.7-5-7.5-6.8-16.7-10-25.1-16.5-43.5-44.9-15.3-61.5-41.6-4.5-7.2 1.2-20.1-16.2-33.5-12.9-9.9-58.2 16.1-82.6-22.5-7.2 19.3-34.6 29.9-47.2 34.2-22.8 7.8-39.4-12.5-58.3 2.6-12.4 9.9-11.7 28.6-18.3 42.9-15.2 32.8-42.5 12.3-70.7 32.8-13.6 9.9-24.9 28.5-25.6 45.3-0.7 16.8 0.3 31.7 8.9 46.1 8.1 13.6 39.1 35.8 56 30.4z" fill="#FF6A48"/><path d="M351 392.2c-22.4 0-50.9-21.9-59.3-36.3-10.3-17.4-11-35.2-10.3-51.8 0.8-19.1 13.1-40.9 29.8-53.1 14.3-10.4 28.4-11.9 39.8-13.1 13.8-1.5 21.4-2.3 27.6-15.8 2.1-4.5 3.3-9.6 4.6-14.6 2.8-11 6-23.6 16.7-32.1 14.3-11.4 28.1-8 39.2-5.3 7.9 1.9 14.7 3.6 22.2 1 28.8-9.8 38.1-20.7 40.9-28 1.4-3.7 4.7-6.2 8.6-6.6 3.9-0.4 7.7 1.5 9.7 4.7 11.8 18.6 28.3 18.5 50.3 16.2 11.9-1.2 22.2-2.3 29.9 3.6 15.1 11.6 16.8 24.2 17.8 31.6 0.2 1.6 0.5 3.9 0.8 4.5 4.4 6.9 9.2 7.8 18.9 9 13.5 1.7 32 4 43.5 34.4 1 2.7 1.9 5.5 2.8 8.3 1.8 5.5 3.4 10.7 6.1 14.8 3.9 5.9 11.3 9.3 19.8 13.3 7.8 3.6 15.8 7.3 22.6 13.7 18.3 17 19.4 45.6 2.7 71-10.8 16.5-34.7 23.3-47.9 25.8-25.1 4.8-63.5 4-89.6-14.1-2.8-2-5.7-4.1-8.5-6.3-10.4-7.9-20.2-15.4-29.5-13.5-5.9 1.1-11.2 5.9-17.3 11.4-3.1 2.8-6.3 5.7-9.6 8.2-20.6 15.4-49.5 17.4-71.9 5-5.4-3-10.5-6.7-15.5-10.5-8.3-6.2-15.4-11.6-23.4-12.3-7.6-0.5-16.4 3.2-27.5 12.2l-4.9 4.1c-9 7.5-18.2 15.2-30.4 19.1-2.8 1-5.7 1.5-8.7 1.5zM422.1 188c-3.4 0-6.3 1-9.4 3.5-5.3 4.2-7.3 12-9.6 21.1-1.5 6-3.1 12.2-5.9 18.2-11.1 24.1-28.6 25.9-44.1 27.5-10.3 1.1-20.1 2.1-29.9 9.3-11.6 8.5-20.9 24.6-21.4 37.4-0.7 15.5 0.3 28.4 7.5 40.5 7.2 12.2 33.8 29 44.1 25.9 8.3-2.6 15.7-8.8 23.4-15.3l5.2-4.3c9.7-7.9 25-18.1 42.1-16.7 13.9 1.2 24.6 9.2 34 16.4 4.2 3.2 8.5 6.4 13.1 8.9 15.3 8.4 35.8 7 49.8-3.5 2.8-2.1 5.4-4.5 8.1-6.9 7.3-6.6 15.6-14.2 27.2-16.4 18.3-3.6 32.9 7.5 45.8 17.2 2.6 2 5.2 4 7.8 5.8 16.9 11.8 46.6 16.2 74 10.8 16.6-3.2 29.9-9.7 34.6-17 11-16.8 11.2-34.8 0.5-44.8-4.4-4.1-10.7-7-17.3-10.1-9.9-4.6-21.1-9.8-28.3-20.5-4.3-6.4-6.5-13.3-8.6-19.9-0.8-2.4-1.6-4.9-2.5-7.3-7.2-18.9-15-19.8-26.9-21.3-10.1-1.3-23.9-3-33.7-18.5-2.7-4.2-3.3-8.7-3.8-12.7-0.8-6.2-1.6-11.6-10-18.1-1.8-0.8-9.9 0-15.3 0.5-16.9 1.7-41.1 4.2-60-13.6-9.2 10.5-24.3 19.3-44.9 26.4-13.1 4.5-24.5 1.7-33.7-0.5-4.9-1.2-8.7-2-11.9-2z" fill="#7F0518"/><path d="M699.3 377.6s131.5-102 250.7 90.8c0 0-198.3 95.1-250.7-90.8z" fill="#FFC831"/><path d="M842.6 503c-22.6 0-46.3-3.7-68.6-13.7-41-18.5-69.4-55.2-84.5-108.9-1.1-4 0.3-8.3 3.6-10.9 2-1.6 51-38.7 117.4-26.7 55.2 10 105.1 50.4 148.3 120.2 1.5 2.5 1.9 5.5 1.1 8.3s-2.8 5.1-5.4 6.4c-3 1.3-54 25.3-111.9 25.3zM711.3 381.9c13.8 43.8 37.7 73.6 71.1 88.7 56.4 25.6 126.1 3.3 152.5-6.9-38.4-58.4-81.4-92.3-128-100.7-45.6-8.3-82.1 10.4-95.6 18.9z" fill="#7F0518"/><path d="M731.1 387.3s70.3-57.8 137.4 55.8c0 0-106.7 53-137.4-55.8z" fill="#FF6A48"/><path d="M812.5 466.3c-12.5 0-25.7-2-38.4-7.7-25.4-11.3-43.2-34.3-52.8-68.5-1.1-3.9 0.2-8.1 3.4-10.7 1.1-0.9 27.7-22.3 64.8-15.8 32.6 5.7 62.2 30.7 87.9 74.3 1.5 2.5 1.8 5.4 1 8.1-0.8 2.7-2.7 5-5.3 6.3-1.6 0.8-28.7 14-60.6 14z m-69.3-74.7c8.1 24.1 21.3 40.3 39.2 48.3 25.6 11.4 55.5 3.8 71.1-1.6-20.8-31.8-43.3-50-67.2-54.4-19.5-3.6-35.2 3.1-43.1 7.7z" fill="#7F0518"/><path d="M325.3 377.6s-131.5-102-250.7 90.8c-0.1 0 198.3 95.1 250.7-90.8z" fill="#FFC831"/><path d="M182 503c-58 0-108.9-24-111.9-25.4-2.6-1.3-4.6-3.6-5.4-6.4-0.8-2.8-0.4-5.8 1.1-8.3 43.2-69.8 93.1-110.3 148.3-120.2 66.4-12 115.3 25.2 117.4 26.7 3.3 2.6 4.7 6.9 3.6 10.9-15.1 53.8-43.6 90.4-84.5 108.9-22.3 10.2-46 13.8-68.6 13.8z m-92.3-39.4c26.3 10.2 96.1 32.5 152.5 6.9 33.4-15.1 57.2-44.9 71-88.7-13.6-8.4-50.4-27.2-95.8-18.9-46.4 8.6-89.4 42.4-127.7 100.7z" fill="#7F0518"/><path d="M293.4 387.3s-70.3-57.8-137.4 55.8c0 0 106.8 53 137.4-55.8z" fill="#FF6A48"/><path d="M212 466.3c-31.8 0-59-13.2-60.5-14-2.6-1.3-4.5-3.5-5.3-6.3-0.8-2.7-0.5-5.7 1-8.1 25.7-43.6 55.3-68.6 87.9-74.3 37.2-6.6 63.7 14.9 64.8 15.8 3.1 2.6 4.5 6.8 3.4 10.7-9.6 34.2-27.4 57.3-52.8 68.5-12.7 5.6-26 7.7-38.5 7.7z m-40.8-28.1c15.6 5.5 45.6 13 71.1 1.6 17.8-8 31-24.2 39.1-48.3-7.9-4.6-23.5-11.3-43-7.7-23.9 4.4-46.5 22.6-67.2 54.4z" fill="#7F0518"/><path d="M795.2 611.2c0 173.7-129 272.2-284.2 272.2S233.4 785 233.4 611.2c0-173.7 124.7-360.1 279.9-360.1 155.1 0 281.9 186.4 281.9 360.1z" fill="#FFC831"/><path d="M511 893.6c-172.2 0-287.9-113.5-287.9-282.4 0-174.8 124.1-370.4 290.1-370.4 164.6 0 292.2 199.1 292.2 370.4 0.1 166.3-121 282.4-294.4 282.4z m2.3-632.2c-151.8 0-269.6 188.1-269.6 349.8 0 156.6 107.5 261.9 267.4 261.9 136.3 0 273.9-81 273.9-261.9 0-161.8-118.7-349.8-271.7-349.8z" fill="#7F0518"/><path d="M668 545.9m-57 0a57 57 0 1 0 114 0 57 57 0 1 0-114 0Z" fill="#7F0518"/><path d="M653.7 534.4m-26.3 0a26.3 26.3 0 1 0 52.6 0 26.3 26.3 0 1 0-52.6 0Z" fill="#FFFFFF"/><path d="M687.3 572.6m-12 0a12 12 0 1 0 24 0 12 12 0 1 0-24 0Z" fill="#FFFFFF"/><path d="M359.9 545.9m-57 0a57 57 0 1 0 114 0 57 57 0 1 0-114 0Z" fill="#7F0518"/><path d="M345.6 534.4m-26.3 0a26.3 26.3 0 1 0 52.6 0 26.3 26.3 0 1 0-52.6 0Z" fill="#FFFFFF"/><path d="M379.2 572.6m-12 0a12 12 0 1 0 24 0 12 12 0 1 0-24 0Z" fill="#FFFFFF"/><path d="M699.3 424.9c-2.5 0-5-0.9-6.9-2.7-10.8-10-21.4-14.8-31.9-14-14.9 1-25 12.9-25.1 13-3.6 4.3-10 4.9-14.4 1.4-4.4-3.6-5-10-1.5-14.4 0.6-0.8 15.5-18.7 39.3-20.5 16.1-1.3 32.2 5.4 47.5 19.4 4.2 3.8 4.4 10.3 0.6 14.5-2.1 2.2-4.8 3.3-7.6 3.3z" fill="#7F0518"/><path d="M331.3 424.9c-2.3 0-4.6-0.7-6.5-2.3-4.4-3.6-5-10-1.5-14.4 0.6-0.8 15.5-18.7 39.3-20.5 16.1-1.2 32.2 5.3 47.5 19.4 4.2 3.8 4.4 10.3 0.6 14.5-3.8 4.2-10.3 4.4-14.5 0.6-10.9-10.1-21.7-14.7-32.1-14-14.8 1.1-24.7 12.8-24.8 12.9-2.1 2.5-5 3.8-8 3.8z" fill="#7F0518"/><path d="M757.6 756.9C692.7 717.8 607.9 694 514.9 694c-93.6 0-178.8 24.2-243.9 63.7 47.6 81.4 136.7 125.8 240.6 125.8 104.3-0.1 196.5-44.8 246-126.6z" fill="#FF6A48"/><path d="M511.6 893.6c-109.9 0-200.8-47.7-249.5-130.8-2.8-4.8-1.3-11 3.5-13.9 69.2-42 157.7-65.2 249.2-65.2 90.9 0 179 22.9 248 64.4 2.3 1.4 4 3.7 4.7 6.3 0.7 2.6 0.2 5.4-1.2 7.8-50.4 83.5-143.2 131.4-254.7 131.4zM285.2 761.2c46.1 71.3 127.9 111.9 226.4 111.9 100.1 0 183.8-40.9 231.6-112.7-64.4-36.3-145-56.2-228.3-56.2-83.9 0-165 20.2-229.7 57z" fill="#7F0518"/><path d="M601.8 764.7c-22.4-0.8 68.6-55.2 77.7 19.6 3 24.3-9.9-17.1-77.7-19.6z" fill="#7F0518"/><path d="M416.5 764.7c22.4-0.8-68.6-55.2-77.7 19.6-3 24.3 9.9-17.1 77.7-19.6z" fill="#7F0518"/></symbol><symbol id="icon-yang" viewbox="0 0 1024 1024"><path d="M848.2 504.2c24.7 16.6 41.2 46.8 41.3 81.6 0.1 45.6-29.4 106.2-67.8 124.1-6.8 3.2-28.4-7.9-28.4 1.1 0.1 53.7-39 98.1-87.2 99.1-14.7 0.3-28.5-3.5-40.7-10.3-8.7 47-58.5 83.9-118.8 85.3-53.6 1.1-99-26.2-114.7-65-15.3 15.1-35.2 24.5-57 25-40.8 0.9-75.1-29.7-84.6-71.6-5.8 1.4-11.7 2.3-17.8 2.4-48.2 1-87.4-41.6-87.4-95.4-0.1-13.3 2.3-25.9 6.6-37.5-36.8-10.7-64-47.6-64-92.3-0.1-42 23.8-78.2 57.3-92.5-13.2-16.8-21.4-38.8-21.4-63.1-0.1-53.7 39-98.1 87.2-99.2 6.4-0.1 12.7 0.5 18.7 1.9 5.1-48.3 41.8-86.6 86.6-87.5 24.5-0.5 46.6 10.3 62.5 28 9.8-44.2 50.8-78.1 100-79.2 52-1.1 94.8 34.8 101.5 82.3 15.4-15.8 35.8-25.6 58.2-26.2 48.2-1 87.4 41.7 87.4 95.4 0 11-1.7 21.6-4.7 31.4 9-3.7 18.7-6 28.8-6.1 48.2-1.1 87.4 41.6 87.5 95.4 0 28.7-11.2 54.7-29.1 72.9z" fill="#FFC831"/><path d="M543.5 895.3c-49.7 0-93.8-23-114.9-58.9-15.8 11.8-34.4 18.5-53.5 18.8-41.7 0.7-78.6-27.5-92.2-70.1-3.4 0.5-6.9 0.7-10.3 0.8-24.1 0.5-47.7-8.9-65.8-26.6-20.4-20-32.1-48.8-32.1-79-0.1-10.6 1.3-21.1 4.1-31.2-36.6-15.5-61.4-54.5-61.5-98.6-0.1-40.2 20.6-77.4 52.4-96.3-10.7-17.4-16.5-38.1-16.5-59.3-0.1-59.2 43.5-108.3 97.2-109.4 3.4 0 6.9 0.1 10.4 0.4 9.7-48.8 48.9-85.1 94.9-86 21.2-0.3 41.1 6.4 57.8 19.6 16.5-40.9 58-69.8 104.7-70.7 50.5-1.1 93.5 29.7 107.9 73.7 15.4-11 33.3-17.2 51.8-17.7 24.2-0.3 47.8 8.9 65.8 26.6 20.4 20 32.1 48.8 32.2 79.1 0 5.6-0.4 11.1-1.2 16.6 4.9-0.9 9.9-1.5 14.9-1.6 23.8-0.8 47.6 8.9 65.7 26.5 20.4 20 32.2 48.8 32.2 79.1 0 26.2-8.7 51.7-24.4 71.5 23.1 19.8 36.6 50 36.6 83 0.1 46.8-30.2 113.1-73.7 133.4-6 2.8-13.2 1.2-20.1-0.2-0.7-0.2-1.6-0.3-2.6-0.5-3.4 55.8-45.6 100.9-97 102-11.6 0.3-23.2-1.8-34.1-6.1-15.4 46.3-65.9 79.6-125.4 81-1.1 0.1-2.2 0.1-3.3 0.1z m-111.6-85.5c0.7 0 1.4 0.1 2.1 0.2 3.4 0.7 6.2 3 7.4 6.2 14.6 36 55.9 59.4 105 58.5 54.2-1.2 101.1-34.2 109-76.9 0.6-3.3 2.7-6 5.8-7.4 3-1.4 6.5-1.2 9.4 0.4 11 6.3 22.9 9.4 35.4 9 42.6-0.9 77.2-40.8 77.2-88.9 0-4.3 1.7-8.1 4.9-10.6 6.1-5 14.3-3.2 22.3-1.5 2.6 0.6 6.9 1.5 8.3 1.3 34.3-16.1 60.8-73.8 60.7-114.4-0.1-30.3-13.8-57.6-36.8-73.1-2.5-1.7-4.2-4.4-4.5-7.5-0.3-3 0.7-6.1 2.9-8.2 16.6-16.9 26.1-40.9 26.1-65.8s-9.5-48.4-26-64.5c-14.1-13.7-31.4-21.1-51-20.7-8.4 0.1-16.8 2-25.1 5.4-3.6 1.5-7.9 0.8-10.8-1.9-2.9-2.7-4.1-6.8-2.9-10.6 2.8-9.3 4.2-18.8 4.2-28.5 0-24.8-9.5-48.3-26-64.4-14.1-13.8-32.5-21.6-51-20.7-18.8 0.5-36.9 8.7-51.1 23.1-2.7 2.8-6.8 3.8-10.5 2.6-3.7-1.2-6.4-4.4-7-8.3-6-42.9-46.1-75-91.1-73.4-43.4 0.9-81.3 30.8-90.2 71.1-0.8 3.8-3.7 6.7-7.4 7.7-3.8 1-7.7-0.2-10.3-3.1-14.6-16.3-33.7-25.5-54.6-24.6-39 0.8-72 34.5-76.6 78.3-0.3 2.9-1.8 5.5-4.2 7.3-2.4 1.7-5.3 2.4-8.2 1.7-5.4-1.2-10.9-1.8-16.3-1.6-42.6 0.9-77.2 40.8-77.1 88.9 0 20.9 6.8 41.1 19.2 56.7 2 2.5 2.7 5.8 1.9 8.9-0.8 3.1-3 5.7-5.9 6.9-30.6 13.1-51.1 46.5-51.1 83.1 0.1 38.9 23.4 72.8 56.6 82.4 2.7 0.8 5 2.7 6.3 5.2 1.3 2.5 1.4 5.5 0.5 8.2-4 10.8-6 22.2-6 33.9 0 24.9 9.4 48.3 25.9 64.4 14.1 13.8 31.5 21.3 51 20.7 5.2-0.1 10.4-0.8 15.6-2.1 2.7-0.6 5.5-0.2 7.8 1.2 2.4 1.4 4 3.8 4.6 6.5 8.7 38.2 38.5 63.8 74.4 63.7 18.2-0.4 36-8.2 50-22 2-1.8 4.6-2.8 7.2-2.8z m371.7-98.9z" fill="#7F0518"/><path d="M248.7 539.8a264.7 219.5 0 1 0 529.4 0 264.7 219.5 0 1 0-529.4 0Z" fill="#FFFFFF"/><path d="M513.4 769.5c-151.6 0-275-103.1-275-229.7S361.8 310 513.4 310s274.9 103.1 274.9 229.7S665 769.5 513.4 769.5z m0-439c-140.3 0-254.4 93.8-254.4 209.2S373.1 749 513.4 749s254.4-93.9 254.4-209.2-114.1-209.3-254.4-209.3z" fill="#7F0518"/><path d="M755.9 437.5c6.6 20.1 17.4 38.9 31.4 54.8 7 8 14.9 15.3 24.1 20.5 8.1 4.7 17.2 7.7 26.4 9.5 19.6 4 40.3 2.8 58.8-4.6 18.5-7.5 34.6-21.4 43.3-39.4 7.8-16.2 20.3-45.3-1-83.1-14.2-25.1-50.8-32-78.4-23.9-27.6 8.1-50.1 36.7-45.4 65.1 9.4 56.6 78.9 67.6 90 9.9 4.9-25.7-14-41.5-30.4-44-8.7-1.4-18.2 2.7-22.8 10.3-4.6 7.5-3.8 18.1 2.1 24.6 6 6.5 16.8 8.1 24.2 3.2" fill="#FFFFFF"/><path d="M860 534.9c-8 0-16.1-0.8-24.3-2.5-11.1-2.3-21-5.9-29.4-10.7-9.1-5.2-17.9-12.6-26.7-22.6-14.8-16.9-26.4-37-33.5-58.4-1.8-5.4 1.1-11.2 6.5-13 5.3-1.8 11.2 1.1 13 6.5 6.2 18.7 16.3 36.5 29.4 51.2 7.3 8.3 14.3 14.3 21.5 18.4 6.5 3.7 14.3 6.5 23.3 8.4 18.3 3.7 37.2 2.3 52.9-4.1 16.8-6.8 30.6-19.3 37.9-34.4 6.1-12.6 18.8-39-0.7-73.5-11.6-20.5-43.6-25.8-66.6-19.1-21.7 6.3-42.2 29.4-38.2 53.6 4.2 25.7 23 39.4 39.3 39.6 15-0.8 26.9-11 30.6-30 1.5-7.9 0.2-14.9-3.9-20.7-4.1-5.9-11.1-10.2-18.1-11.3-4.7-0.7-10.1 1.6-12.5 5.5-2.3 3.7-1.9 9.2 0.9 12.3 2.7 2.9 7.9 3.6 10.9 1.6 4.7-3.2 11.1-1.9 14.2 2.8 3.1 4.7 1.9 11.1-2.8 14.2-11.5 7.6-27.9 5.6-37.4-4.7-9.1-9.8-10.5-25.4-3.4-36.9 6.8-11 20.1-17.1 33.1-15 12.5 2 24.4 9.4 31.7 19.8 7.3 10.4 9.8 22.9 7.2 36.3-5.4 28.4-25.2 46.6-50.3 46.6h-0.7c-24.8-0.3-53.2-19.9-59.3-56.8-5.3-32.2 18.3-66.6 52.7-76.7 30.8-9 72.9-2 90.2 28.7 24.8 43.9 8.4 78 1.3 92.6-9.5 19.6-27.2 35.8-48.7 44.4-12.3 5.3-25.9 7.9-40.1 7.9z" fill="#7F0518"/><path d="M270.1 434.3c-6.6 20.1-17.4 38.9-31.4 54.8-7 8-14.9 15.3-24.1 20.5-8.1 4.7-17.2 7.7-26.4 9.5-19.6 4-40.3 2.8-58.8-4.6-18.5-7.5-34.6-21.4-43.3-39.4-7.8-16.2-20.3-45.3 1-83.1 14.2-25.1 50.8-32 78.4-23.9 27.6 8.1 50.1 36.7 45.4 65.1-9.4 56.6-78.9 67.6-90 9.9-4.9-25.7 14-41.5 30.4-44 8.7-1.4 18.2 2.7 22.8 10.3 4.6 7.5 3.8 18.1-2.1 24.6-6 6.5-16.8 8.1-24.2 3.2" fill="#FFFFFF"/><path d="M166 531.7c-14.1 0-27.8-2.6-40.4-7.6-21.4-8.6-39.2-24.8-48.7-44.4-7-14.6-23.5-48.7 1.3-92.6 17.4-30.7 59.4-37.7 90.2-28.7 34.4 10 58 44.5 52.7 76.7-6.1 36.8-34.4 56.4-59.3 56.8h-0.7c-25.1 0-44.8-18.2-50.3-46.6-2.6-13.4-0.1-26 7.2-36.3 7.3-10.4 19.2-17.8 31.7-19.8 13.2-2 26.4 4 33.2 15 7.1 11.6 5.7 27.1-3.4 36.9-9.5 10.3-25.9 12.4-37.4 4.7-4.7-3.1-6-9.5-2.8-14.2 3.1-4.7 9.5-6 14.2-2.8 3.1 2 8.3 1.3 10.9-1.6 2.8-3 3.2-8.6 0.9-12.3-2.4-3.9-7.7-6.3-12.5-5.5-5.5 0.9-13.2 4.3-18.1 11.3-4.1 5.8-5.4 12.7-3.8 20.7 3.6 19 15 29.6 30.6 30 16.3-0.2 35-13.9 39.3-39.6 4-24.2-16.5-47.3-38.2-53.6-23-6.7-55-1.3-66.6 19.1-19.5 34.6-6.8 60.9-0.7 73.6 7.3 15.1 21.1 27.6 37.9 34.3 15.8 6.4 34.6 7.8 53 4.1 9-1.8 16.8-4.6 23.3-8.4 7.1-4.1 14.2-10.1 21.5-18.4 13-14.8 23.2-32.5 29.4-51.2 1.8-5.4 7.5-8.3 13-6.5 5.4 1.8 8.3 7.6 6.5 13-7.1 21.3-18.6 41.5-33.5 58.4-8.8 10-17.6 17.4-26.7 22.6-8.4 4.8-18.3 8.4-29.4 10.7-8.2 1.4-16.3 2.2-24.3 2.2z" fill="#7F0518"/><path d="M643.1 536m-55 0a55 55 0 1 0 110 0 55 55 0 1 0-110 0Z" fill="#7F0518"/><path d="M629.2 524.9m-25.4 0a25.4 25.4 0 1 0 50.8 0 25.4 25.4 0 1 0-50.8 0Z" fill="#FFFFFF"/><path d="M661.7 561.8m-11.6 0a11.6 11.6 0 1 0 23.2 0 11.6 11.6 0 1 0-23.2 0Z" fill="#FFFFFF"/><path d="M385.2 537.8m-55 0a55 55 0 1 0 110 0 55 55 0 1 0-110 0Z" fill="#7F0518"/><path d="M371.3 526.7m-25.4 0a25.4 25.4 0 1 0 50.8 0 25.4 25.4 0 1 0-50.8 0Z" fill="#FFFFFF"/><path d="M403.8 563.6m-11.6 0a11.6 11.6 0 1 0 23.2 0 11.6 11.6 0 1 0-23.2 0Z" fill="#FFFFFF"/><path d="M677.8 454.8c-2.5 0-5-0.9-6.9-2.7-10.4-9.6-20.8-14.2-30.6-13.5-14.2 0.9-23.9 12.3-24 12.4-3.6 4.4-10.1 5-14.4 1.4-4.4-3.6-5-10-1.5-14.4 0.6-0.7 15.1-18.2 38.2-19.9 16-1.1 31.3 5.2 46.1 18.8 4.2 3.8 4.4 10.3 0.6 14.5-2 2.3-4.8 3.4-7.5 3.4z" fill="#7F0518"/><path d="M353.5 456.6c-2.3 0-4.6-0.7-6.5-2.3-4.4-3.6-5-10-1.5-14.4 0.6-0.7 15.1-18.2 38.2-19.9 15.9-1.2 31.3 5.2 46.1 18.8 4.2 3.8 4.4 10.3 0.6 14.5-3.8 4.2-10.3 4.5-14.5 0.6-10.5-9.6-20.9-14.2-30.8-13.5-14.1 1-23.7 12.3-23.7 12.4-2 2.5-5 3.8-7.9 3.8z" fill="#7F0518"/><path d="M643 639.5a43.8 28.6 0 1 0 87.6 0 43.8 28.6 0 1 0-87.6 0Z" fill="#FF6A48"/><path d="M299.1 639.5a43.8 28.6 0 1 0 87.6 0 43.8 28.6 0 1 0-87.6 0Z" fill="#FF6A48"/><path d="M478.4 640.8a40.1 28.1 0 1 0 80.2 0 40.1 28.1 0 1 0-80.2 0Z" fill="#7F0518"/><path d="M488.6 714.5c-2.4 0-4.7-0.2-7-0.7-21-3.9-31.5-24.6-31.9-25.5-2.5-5.1-0.5-11.2 4.6-13.8 5.1-2.5 11.2-0.4 13.7 4.6 0.2 0.3 6.6 12.6 17.5 14.5 6.7 1.1 14.3-1.7 22.8-8.5v-21.7c0-5.7 4.6-10.3 10.3-10.3s10.3 4.6 10.3 10.3v26.4c0 2.9-1.2 5.7-3.4 7.6-12.5 11.4-24.9 17.1-36.9 17.1z" fill="#7F0518"/><path d="M548.5 714.5c-12 0-24.4-5.7-36.8-17-4.2-3.8-4.5-10.3-0.7-14.5 3.8-4.2 10.3-4.5 14.5-0.7 9.9 8.9 18.7 12.9 26.3 11.4 10.7-2 17.3-14.3 17.3-14.4 2.5-5 8.6-7.1 13.8-4.6 5.1 2.5 7.1 8.7 4.6 13.8-0.4 0.9-10.9 21.5-31.9 25.5-2.4 0.3-4.8 0.5-7.1 0.5z" fill="#7F0518"/></symbol><symbol id="icon-houzi" viewbox="0 0 1024 1024"><path d="M829 498.3m-120.1 0a120.1 120.1 0 1 0 240.2 0 120.1 120.1 0 1 0-240.2 0Z" fill="#FFC831"/><path d="M829 628.6c-71.9 0-130.4-58.5-130.4-130.3S757.1 367.9 829 367.9s130.3 58.5 130.3 130.3S900.9 628.6 829 628.6z m0-240.2c-60.6 0-109.8 49.3-109.8 109.8S768.4 608.1 829 608.1c60.5 0 109.8-49.3 109.8-109.8S889.5 388.4 829 388.4z" fill="#7F0518"/><path d="M829 498.3m-72.6 0a72.6 72.6 0 1 0 145.2 0 72.6 72.6 0 1 0-145.2 0Z" fill="#FF6A48"/><path d="M829 581.1c-45.7 0-82.9-37.2-82.9-82.9s37.2-82.9 82.9-82.9 82.9 37.2 82.9 82.9-37.2 82.9-82.9 82.9z m0-145.2c-34.4 0-62.4 28-62.4 62.3 0 34.4 28 62.3 62.4 62.3s62.3-28 62.3-62.3-27.9-62.3-62.3-62.3z" fill="#7F0518"/><path d="M193.7 498.3m-120.1 0a120.1 120.1 0 1 0 240.2 0 120.1 120.1 0 1 0-240.2 0Z" fill="#FFC831"/><path d="M193.7 628.6c-71.9 0-130.4-58.5-130.4-130.3S121.8 368 193.7 368 324 426.5 324 498.3s-58.4 130.3-130.3 130.3z m0-240.2c-60.6 0-109.8 49.3-109.8 109.8S133.2 608 193.7 608s109.8-49.3 109.8-109.8-49.3-109.8-109.8-109.8z" fill="#7F0518"/><path d="M193.7 498.3m-72.6 0a72.6 72.6 0 1 0 145.2 0 72.6 72.6 0 1 0-145.2 0Z" fill="#FF6A48"/><path d="M193.7 581.1c-45.7 0-82.9-37.2-82.9-82.9s37.2-82.9 82.9-82.9 82.9 37.2 82.9 82.9-37.2 82.9-82.9 82.9z m0-145.2c-34.4 0-62.3 28-62.3 62.3 0 34.4 28 62.3 62.3 62.3 34.4 0 62.3-28 62.3-62.3s-28-62.3-62.3-62.3z" fill="#7F0518"/><path d="M842.6 520.3c0 175.8-147.7 318.3-329.8 318.3-182.2 0.1-329.8-142.5-329.8-318.3S330.6 202 512.8 202c182.1 0 329.8 142.5 329.8 318.3z" fill="#FF6A48"/><path d="M512.8 848.9c-187.5 0-340.1-147.4-340.1-328.6 0-181.2 152.6-328.6 340.1-328.6 187.5 0 340.1 147.4 340.1 328.6 0 181.2-152.6 328.6-340.1 328.6z m0-636.6c-176.2 0-319.6 138.2-319.6 308.1 0 169.9 143.4 308.1 319.6 308.1s319.5-138.2 319.5-308.1c0-169.9-143.3-308.1-319.5-308.1z" fill="#7F0518"/><path d="M802.1 520.3c0-91.1-34.6-179.6-133.8-184.2-56.5-2.6-90.1 65.8-155 68.2-65-2.4-98.6-70.8-155-68.2-99.2 4.6-133.8 93.1-133.8 184.2 0 150.4 126.7 273 285.3 278.9v0.3c1.2 0 2.3-0.1 3.5-0.1 1.2 0 2.3 0.1 3.5 0.1v-0.3c158.6-5.9 285.3-128.4 285.3-278.9z" fill="#FFFFFF"/><path d="M516.8 809.8h-0.3l-3.2-10.3 0.2 10.1c-1.3-0.1-2.6-0.1-4.1-0.5v0.3c-165.5-6.1-295.2-133.1-295.2-289.1 0-117.6 53.7-190.3 143.6-194.4 31.7-1.2 56.4 16.5 80.4 33.8 22.6 16.4 46 33.3 75.5 34.4 28.8-1.1 52.2-18 74.7-34.4 24-17.4 48.7-35.1 80.4-33.8 89.9 4.1 143.6 76.8 143.6 194.4 0 155.3-128.5 281.8-293 289-0.9 0.3-1.7 0.5-2.6 0.5z m0-10.3h0.3-0.3z m-3.3-10.4c0.1 0 0.1 0 0 0l0.1 0.4c0.9-0.3 1.8-0.5 2.8-0.5 154.5-5.7 275.5-123.7 275.5-268.6 0-50.6-12.1-168.8-124-173.9-23.9-1.1-44.4 13.3-67.4 30-23.9 17.3-51 36.9-86.8 38.2-36.5-1.3-63.6-20.9-87.5-38.2-23.1-16.7-42.7-31.3-67.4-30-111.9 5.2-124 123.4-124 173.9 0 144.9 121 262.9 275.5 268.6 0.6 0 1.1 0.1 1.7 0.2 0.7-0.1 1.4-0.1 1.5-0.1z" fill="#7F0518"/><path d="M668.9 559.9m-58.5 0a58.5 58.5 0 1 0 117 0 58.5 58.5 0 1 0-117 0Z" fill="#7F0518"/><path d="M654.2 548.1m-27 0a27 27 0 1 0 54 0 27 27 0 1 0-54 0Z" fill="#FFFFFF"/><path d="M688.7 587.3m-12.3 0a12.3 12.3 0 1 0 24.6 0 12.3 12.3 0 1 0-24.6 0Z" fill="#FFFFFF"/><path d="M376.5 559.9m-58.5 0a58.5 58.5 0 1 0 117 0 58.5 58.5 0 1 0-117 0Z" fill="#7F0518"/><path d="M361.8 548.1m-27 0a27 27 0 1 0 54 0 27 27 0 1 0-54 0Z" fill="#FFFFFF"/><path d="M396.3 587.3m-12.3 0a12.3 12.3 0 1 0 24.6 0 12.3 12.3 0 1 0-24.6 0Z" fill="#FFFFFF"/><path d="M632.1 463.9c-2.3 0-4.6-0.7-6.5-2.3-4.4-3.6-5.1-10-1.5-14.4 0.6-0.8 15.8-19.1 40.1-20.9 16.6-1.1 33 5.5 48.5 19.8 4.2 3.8 4.4 10.3 0.6 14.5-3.8 4.2-10.3 4.5-14.5 0.6-11.2-10.4-22.1-15.3-33.2-14.5-15.3 1.1-25.6 13.3-25.7 13.4-1.9 2.5-4.9 3.8-7.8 3.8z" fill="#7F0518"/><path d="M339.6 463.9c-2.3 0-4.6-0.7-6.5-2.3-4.4-3.6-5.1-10-1.5-14.4 0.6-0.8 15.8-19.1 40.1-20.9 16.5-1.1 33 5.5 48.5 19.8 4.2 3.8 4.4 10.3 0.6 14.5-3.8 4.2-10.3 4.5-14.5 0.6-11.3-10.4-22.1-15.3-33.2-14.5-15.3 1.1-25.6 13.3-25.7 13.4-1.8 2.5-4.8 3.8-7.8 3.8z" fill="#7F0518"/><path d="M475.7 615.1a47 32.9 0 1 0 94 0 47 32.9 0 1 0-94 0Z" fill="#7F0518"/><path d="M487.6 699.7c-2.6 0-5.3-0.3-7.9-0.7-23.8-4.5-35.7-27.9-36.2-28.9-2.5-5.1-0.5-11.2 4.6-13.8 5-2.4 11.2-0.5 13.7 4.6 0.1 0.1 8 15.4 21.7 17.9 8.5 1.6 18.2-2.1 28.9-10.9v-26.2c0-5.7 4.6-10.3 10.3-10.3 5.7 0 10.3 4.6 10.3 10.3v30.9c0 2.9-1.2 5.7-3.4 7.6-14.2 13-28.3 19.5-42 19.5z" fill="#7F0518"/><path d="M557.8 699.7c-13.7 0-27.8-6.5-42-19.5-4.2-3.8-4.5-10.3-0.7-14.5 3.8-4.2 10.3-4.5 14.5-0.7 12 10.9 22.7 15.4 32.2 13.8 13.7-2.5 21.6-17.8 21.7-18 2.6-5 8.7-7.1 13.8-4.5 5 2.5 7.1 8.7 4.6 13.7-0.5 1-12.4 24.5-36.2 28.9-2.6 0.6-5.2 0.8-7.9 0.8z" fill="#7F0518"/></symbol><symbol id="icon-ji" viewbox="0 0 1024 1024"><path d="M841.5 641.1c0 175.8-147.2 248.4-328.7 248.4C331.2 889.5 184 817 184 641.1c0-175.8 147.2-388.3 328.7-388.3 181.6 0 328.8 212.5 328.8 388.3z" fill="#FFFFFF"/><path d="M512.8 900.4c-212.7 0-339.7-96.9-339.7-259.3 0-180.8 151.5-399.3 339.7-399.3s339.6 218.4 339.6 399.3c0 162.4-126.9 259.3-339.6 259.3z m0-636.7C336.7 263.7 195 470.2 195 641.1c0 214.3 222.3 237.5 317.8 237.5s317.8-23.1 317.8-237.5c0-170.9-141.8-377.4-317.8-377.4z" fill="#7F0518"/><path d="M660.2 160.8c-44.7-71.8-88.2-21.1-97.5-8.7 6.4-15.7 8.3-76.8-51.9-76.8-56.8 0-49.4 56.9-45.7 74.4-12.3-15.3-53.4-56.6-95.5 11.2-50.4 81 96.3 204.7 96.3 204.7 7.5 5.3 14.6 8.6 21.4 10.4 8.3 2.9 19.5 5.6 32.4 5.6 18 0 31.6-7.4 38.8-12.5 1.8-1.1 3.6-2.2 5.5-3.6-0.1 0 146.6-123.8 96.2-204.7z" fill="#FF6A48"/><path d="M519.6 392.5c-12 0-24.1-2.1-36-6.2-7.6-2-16-6-24.1-11.8-7-5.9-154-131.4-99.2-219.4 16.9-27.1 36-41.5 56.9-42.7 13-1.1 25.1 3.8 34.7 10.2 0.5-13.2 3.7-27.8 12.9-39.1 10.3-12.6 25.8-19 46.1-19 30.4 0 46.2 14 54.2 25.8 6.9 10.2 10.2 22.2 11.3 33.5 9.7-6.8 21.8-12.3 35.5-11.4 21.2 0.9 40.5 15.3 57.7 42.8 54.8 88-92.2 213.5-98.5 218.8-2.9 2.1-5 3.4-7.1 4.7-7 4.7-23.1 13.8-44.4 13.8zM420 134c-0.5 0-1.1 0-1.6 0.1-13.4 0.8-26.7 11.7-39.6 32.5-44.8 72 92.7 189.4 94 190.6 5.3 3.7 11.3 6.7 17.2 8.2 7.4 2.5 17.6 5.3 29.6 5.3 15.3 0 27-6.6 32.6-10.5 2.3-1.4 3.9-2.4 5.5-3.5 0.7-0.6 138.2-118 93.3-190-13.1-21-26.5-31.9-40-32.5-18.5-1-34.9 18.6-39.4 24.6-3.3 4.4-9.3 5.6-14.1 3-4.8-2.7-6.8-8.5-4.8-13.6 2.7-6.6 4.9-29.9-5.7-45.7-7.2-10.7-19.3-16.1-36-16.1-13.6 0-23.1 3.6-29.1 11-12.1 14.9-7.6 42.2-5.9 50.2 1 5-1.5 10-6 12.1-4.6 2.1-10 0.9-13.2-3-5.8-7.1-20.1-22.7-36.8-22.7z" fill="#7F0518"/><path d="M530.8 809.8l-0.4-13.2s-6.2 2-15.6 5.9c-9.4-3.9-15.6-5.9-15.6-5.9l-0.4 13.2c-37.2 18.7-91.1 57.2-65.1 116 15.1 34 53.9 28.3 83.3-3.9 4.9 5.3 55.4 56.5 78.7 3.9 26.2-58.8-27.7-97.3-64.9-116z" fill="#FF6A48"/><path d="M566.1 960.3c-19.6 0-38.4-13.8-48.9-23.1-18.5 16.8-39.7 24.9-58.2 21.9-15.6-2.5-28.1-12.8-35.2-28.9-21.5-48.7 1.3-93.7 64.3-127.2l0.2-6.8c0.1-3.4 1.8-6.6 4.6-8.6s6.3-2.6 9.6-1.5c0 0 4.7 1.5 12.2 4.5 7.5-3 12.3-4.5 12.3-4.5 3.2-1 6.8-0.4 9.6 1.5 2.8 2 4.5 5.2 4.6 8.6l0.2 6.8c63 33.5 85.8 78.5 64.3 127.2-9.5 21.5-23.3 27.9-33.3 29.6-2 0.3-4.1 0.5-6.3 0.5z m-49-49.3c3.1 0 6 1.3 8.1 3.6 6.4 7 28.5 26.4 43.8 23.7 2.5-0.4 10.1-1.7 16.8-16.8 21.5-48.5-20.8-82.2-60-101.8-3-1.5-5.1-4.3-5.8-7.5-0.3 0.1-0.7 0.3-1 0.4-2.7 1.1-5.7 1.1-8.5 0-0.3-0.1-0.7-0.3-1-0.4-0.7 3.2-2.8 6-5.8 7.5-39.2 19.6-81.4 53.3-60 101.8 4.2 9.4 10.4 14.8 18.7 16.2 13.7 2.3 31.5-6.6 46.5-23 2.2-2.4 5.2-3.7 8.2-3.7z" fill="#7F0518"/><path d="M662.8 722.5s-38.4-108.4-142.4-108.4-146.1 101.8-146.1 101.8c0.7 2 30.8 131.7 139.9 131.7 95.2-0.1 133.1-83.1 148.6-125.1z" fill="#FFC831"/><path d="M514.2 858.4c-108 0-144.1-115.8-150.2-139.1-0.6-2.3-0.7-5.5 0.3-7.7 1.8-4.4 46.1-108.6 156.2-108.6 110.5 0 152.3 114.6 152.7 115.7 0.9 2.4 0.8 5-0.1 7.4-32.4 87.9-85.8 132.3-158.9 132.3zM385.8 716.8c8.4 28.8 41.5 119.8 128.3 119.8 62 0 108-38.4 136.9-114.1-7.5-18.3-45-97.6-130.7-97.6-85.4 0-126.4 75.2-134.5 91.9z" fill="#7F0518"/><path d="M697 579.1m-54.5 0a54.5 54.5 0 1 0 109 0 54.5 54.5 0 1 0-109 0Z" fill="#7F0518"/><path d="M683.3 568m-25.1 0a25.1 25.1 0 1 0 50.2 0 25.1 25.1 0 1 0-50.2 0Z" fill="#FFFFFF"/><path d="M715.4 604.6m-11.5 0a11.5 11.5 0 1 0 23 0 11.5 11.5 0 1 0-23 0Z" fill="#FFFFFF"/><path d="M329 579.1m-54.5 0a54.5 54.5 0 1 0 109 0 54.5 54.5 0 1 0-109 0Z" fill="#7F0518"/><path d="M315.3 568m-25.1 0a25.1 25.1 0 1 0 50.2 0 25.1 25.1 0 1 0-50.2 0Z" fill="#FFFFFF"/><path d="M347.5 604.6m-11.5 0a11.5 11.5 0 1 0 23 0 11.5 11.5 0 1 0-23 0Z" fill="#FFFFFF"/><path d="M726.9 464.4c-2.6 0-5.3-1-7.4-2.9-10.2-9.3-20.2-14-29.7-13.1-13.7 0.9-23.1 11.9-23.2 12.1-3.9 4.6-10.8 5.3-15.3 1.4-4.6-3.8-5.3-10.6-1.6-15.3 0.6-0.7 15.1-18.3 38.4-20 15.9-1 31.4 5.2 46.3 18.8 4.4 4.1 4.7 11 0.7 15.4-2.3 2.5-5.3 3.6-8.2 3.6z" fill="#7F0518"/><path d="M301.6 464.4c-2.4 0-4.9-0.8-6.9-2.4-4.7-3.8-5.4-10.7-1.6-15.4 0.6-0.7 15.2-18.3 38.4-20 15.8-1 31.4 5.2 46.2 18.8 4.4 4.1 4.7 11 0.6 15.4-4 4.5-11 4.7-15.4 0.6-10.2-9.4-20.3-14-29.9-13.1-13.7 1-22.9 11.9-23 12-2.1 2.8-5.2 4.1-8.4 4.1z" fill="#7F0518"/><path d="M518.9 771c-70.7 0-123.5-34.6-124.3-35.1-5-3.4-6.3-10.1-3-15.1 3.4-5 10.1-6.4 15.1-3 4.4 2.9 108.1 70.4 216.2-0.1 5-3.3 11.8-1.9 15.1 3.2 3.3 5.1 1.8 11.8-3.2 15.1-40.2 26.3-80.4 35-115.9 35z" fill="#7F0518"/></symbol><symbol id="icon-zhu" viewbox="0 0 1024 1024"><path d="M164.1 390.9S61.8 288.4 123.3 240.7c61.5-47.7 185 5.4 185 5.4s-79.8 217.3-144.2 144.8z" fill="#FF6A48"/><path d="M192.5 416.5c-10.4 0-23.5-3.9-36.3-18.2-4.9-5-66.6-68.6-63.2-122.1 1.1-17.9 9.1-32.8 23.7-44.1 65.7-51 190.6 1.7 195.9 4 5.3 2.3 7.9 8.3 5.9 13.7-5.8 15.8-58.3 154.7-118 166-2.4 0.4-5.1 0.7-8 0.7z m0.2-184.9c-23.3 0-45.8 4.6-62.7 17.7-9.6 7.5-14.6 16.7-15.4 28.3-2.3 37.3 40.5 88.9 57.2 105.6 0.1 0.1 0.3 0.3 0.4 0.5 10.5 11.8 18.8 11.8 24.2 10.8 33.7-6.4 76.1-86.7 97.9-142.2-18.6-6.9-61.2-20.7-101.6-20.7z" fill="#7F0518"/><path d="M209.2 366.9s-57.5-57.6-22.9-84.4c34.6-26.8 104 3 104 3s-44.9 122.2-81.1 81.4z" fill="#FFC831"/><path d="M225.1 386.1c-6.9 0-15.5-2.5-23.8-11.7-4.9-5-38.8-40.5-36.8-72.2 0.7-11.3 6-21.1 15.2-28.2 39.1-30.4 111.9 0.3 114.9 1.6 5.3 2.3 7.9 8.3 5.9 13.7-5.5 14.9-34.6 89.7-69.9 96.4-1.7 0.1-3.6 0.4-5.5 0.4z m0.2-104c-12.4 0-24 2.4-32.4 8.9-4.3 3.3-6.5 7.3-6.8 12.4-1.2 19.1 21.8 46.7 30.8 55.8 0.1 0.1 0.3 0.3 0.4 0.5 4.8 5.4 7.9 4.8 9.2 4.6 15.5-2.9 36.9-41.3 49.7-72.5-13.3-4.7-32.9-9.7-50.9-9.7z" fill="#7F0518"/><path d="M853.5 390.9s102.3-102.5 40.8-150.2c-61.5-47.7-185 5.4-185 5.4s79.8 217.3 144.2 144.8z" fill="#FF6A48"/><path d="M825.1 416.5c-2.9 0-5.6-0.3-8-0.8-59.6-11.3-112.1-150.2-118-166-2-5.4 0.6-11.4 5.9-13.7 5.3-2.2 130.1-55 195.9-4 14.6 11.3 22.6 26.2 23.7 44.1 3.4 53.5-58.3 117.1-63.2 122.1-12.8 14.4-25.9 18.3-36.3 18.3zM723.3 252.3c21.7 55.5 64.1 135.8 97.8 142.2 5.5 1 13.7 1 24.2-10.8 0.1-0.2 0.3-0.3 0.4-0.5 16.7-16.8 59.5-68.5 57.2-105.7-0.8-11.6-5.8-20.8-15.4-28.3-46.1-35.8-134.8-7.8-164.2 3.1z" fill="#7F0518"/><path d="M808.4 366.9s57.5-57.6 22.9-84.4c-34.6-26.8-104 3-104 3s44.9 122.2 81.1 81.4z" fill="#FFC831"/><path d="M792.5 386.1c-2 0-3.8-0.2-5.5-0.5-35.4-6.7-64.4-81.4-69.9-96.4-2-5.4 0.6-11.4 5.9-13.7 3.1-1.3 75.7-32 114.9-1.6 9.2 7.2 14.4 16.9 15.2 28.3 2 31.7-32 67.3-36.9 72.2-8.2 9.1-16.7 11.7-23.7 11.7z m-51.1-94.4c12.7 31.2 34.1 69.6 49.7 72.5 1.2 0.2 4.4 0.9 9.2-4.6 0.1-0.2 0.3-0.3 0.4-0.5 9-9 32-36.6 30.8-55.8-0.3-5.1-2.5-9.1-6.8-12.5-20.6-15.8-60.8-6.8-83.3 0.9z" fill="#7F0518"/><path d="M886.1 594.6c0 186.5-168.2 263.5-375.7 263.5s-375.7-77-375.7-263.5 168.2-412 375.7-412 375.7 225.5 375.7 412z" fill="#FF6A48"/><path d="M510.4 868.9c-242 0-386.5-102.6-386.5-274.3 0-191.5 172.4-422.8 386.5-422.8s386.5 231.3 386.5 422.8c0 171.8-144.5 274.3-386.5 274.3z m0-675.4c-202.1 0-364.8 219.4-364.8 401.1 0 228 255.1 252.6 364.8 252.6s364.8-24.6 364.8-252.6c0-181.7-162.7-401.1-364.8-401.1z" fill="#7F0518"/><path d="M722.2 446.6m-62.3 0a62.3 62.3 0 1 0 124.6 0 62.3 62.3 0 1 0-124.6 0Z" fill="#7F0518"/><path d="M706.6 434m-28.7 0a28.7 28.7 0 1 0 57.4 0 28.7 28.7 0 1 0-57.4 0Z" fill="#FFFFFF"/><path d="M743.3 475.8m-13.1 0a13.1 13.1 0 1 0 26.2 0 13.1 13.1 0 1 0-26.2 0Z" fill="#FFFFFF"/><path d="M300 446.6m-62.3 0a62.3 62.3 0 1 0 124.6 0 62.3 62.3 0 1 0-124.6 0Z" fill="#7F0518"/><path d="M284.3 434m-28.7 0a28.7 28.7 0 1 0 57.4 0 28.7 28.7 0 1 0-57.4 0Z" fill="#FFFFFF"/><path d="M321.1 475.8m-13.1 0a13.1 13.1 0 1 0 26.2 0 13.1 13.1 0 1 0-26.2 0Z" fill="#FFFFFF"/><path d="M756.4 352.4c-2.6 0-5.3-0.9-7.3-2.9-12-11-24.1-16.3-35.2-15.4-16.4 1.1-27.6 14.2-27.7 14.3-3.8 4.6-10.6 5.3-15.2 1.5s-5.3-10.6-1.6-15.2c0.7-0.8 16.8-20.4 42.7-22.2 17.9-1.4 35.1 5.8 51.7 21.1 4.4 4.1 4.7 10.9 0.7 15.3-2.2 2.4-5.1 3.5-8.1 3.5z" fill="#7F0518"/><path d="M269.4 352.4c-2.4 0-4.8-0.8-6.8-2.4-4.7-3.8-5.4-10.6-1.6-15.3 0.7-0.8 16.9-20.4 42.7-22.2 18-1.4 35.1 5.8 51.7 21.1 4.4 4.1 4.7 10.9 0.7 15.3-4.1 4.4-10.9 4.7-15.3 0.6-12-11.1-24.1-16.2-35.4-15.4-16.3 1.2-27.3 14.2-27.4 14.3-2.3 2.7-5.5 4-8.6 4z" fill="#7F0518"/><path d="M274.5 643.6a235.9 154.6 0 1 0 471.8 0 235.9 154.6 0 1 0-471.8 0Z" fill="#FFC831"/><path d="M510.4 809.1c-136 0-246.7-74.2-246.7-165.5s110.7-165.5 246.7-165.5 246.7 74.2 246.7 165.5-110.7 165.5-246.7 165.5z m0-309.3c-124.1 0-225 64.5-225 143.8s100.9 143.8 225 143.8 225-64.5 225-143.8-101-143.8-225-143.8z" fill="#7F0518"/><path d="M383.5 657.3a35.5 45.6 0 1 0 71 0 35.5 45.6 0 1 0-71 0Z" fill="#FFFFFF"/><path d="M419 713.8c-25.5 0-46.3-25.3-46.3-56.5s20.8-56.5 46.3-56.5 46.3 25.3 46.3 56.5-20.7 56.5-46.3 56.5z m0-91.2c-13.4 0-24.6 15.9-24.6 34.8s11.3 34.8 24.6 34.8 24.6-15.9 24.6-34.8-11.2-34.8-24.6-34.8z" fill="#7F0518"/><path d="M573.8 657.3a35.5 45.6 0 1 0 71 0 35.5 45.6 0 1 0-71 0Z" fill="#FFFFFF"/><path d="M609.3 713.8c-25.5 0-46.3-25.3-46.3-56.5s20.8-56.5 46.3-56.5 46.3 25.3 46.3 56.5-20.8 56.5-46.3 56.5z m0-91.2c-13.4 0-24.6 15.9-24.6 34.8s11.3 34.8 24.6 34.8c13.4 0 24.6-15.9 24.6-34.8s-11.3-34.8-24.6-34.8z" fill="#7F0518"/></symbol><symbol id="icon-gou" viewbox="0 0 1024 1024"><path d="M199 309C113.6 431.4 84.3 497 78.6 533.5 73 570 76.1 608 95.8 638.3c19.7 30.3 62.3 45.9 103.2 15.9 32.9-24.1 71.7-117.7 84.7-158.1C319.8 384 373.8 232.2 319 214.7c-37.8-12.1-97.8 62.6-120 94.3z" fill="#FF6A48"/><path d="M153.5 681.3c-4.6 0-9.2-0.4-13.9-1.3-21.4-3.9-40.7-16.9-53-35.8C67.5 614.9 61 576 67.8 531.8 75 485.2 115 410.2 190.1 302.7c18.9-27 84.2-114 132.2-98.4 10.4 3.3 18.2 10.2 23.5 20.4 23 44.9-12.3 153.8-43.6 249.9l-8.1 24.9c-8.8 27.3-49.6 135-88.6 163.6-16.4 12-34.2 18.2-52 18.2zM208 315.2c-72.1 103.3-112 177.3-118.6 220-4.2 27-4.9 65.8 15.6 97.2 9 13.8 23 23.3 38.6 26.2 16.3 3 33.3-1.6 49-13.1 29.2-21.4 67-110 80.8-152.6l8.1-25c26.9-82.8 63.8-196.3 44.9-233.1-2.6-5-6-8-10.7-9.6-24-7.8-72.3 39.4-107.7 90z" fill="#7F0518"/><path d="M827.4 309c85.5 122.4 114.8 188 120.4 224.5 5.6 36.5 2.5 74.5-17.2 104.8-19.7 30.3-62.3 45.9-103.2 15.9-32.9-24.1-71.7-117.7-84.7-158.1-36.1-112.1-90.1-263.9-35.2-281.5 37.7-12 97.7 62.7 119.9 94.4z" fill="#FF6A48"/><path d="M872.9 681.3c-17.8 0-35.5-6.2-52-18.2-39.1-28.7-79.8-136.3-88.6-163.6l-8-24.7c-31.2-96.2-66.7-205.2-43.7-250.1 5.2-10.2 13.1-17.1 23.5-20.4 47.9-15.7 113.4 71.5 132.2 98.5 75 107.4 115 182.4 122.3 229.1 6.8 44.2 0.3 83-18.9 112.4-12.2 18.8-31.5 31.8-52.9 35.8-4.6 0.8-9.3 1.2-13.9 1.2z m-156.6-457c-2 0-3.8 0.3-5.6 0.8-4.7 1.5-8.1 4.6-10.7 9.6-18.9 36.9 18 150.5 45 233.4l8 24.7c13.7 42.6 51.4 131.2 80.7 152.6 15.8 11.5 32.8 16.1 49.1 13.1 15.5-2.8 29.6-12.4 38.5-26.2 20.4-31.4 19.7-70.1 15.6-97.2-6.6-42.7-46.5-116.7-118.6-219.9-32.7-46.9-76.6-90.9-102-90.9z" fill="#7F0518"/><path d="M817.1 562.9c0 197.1-136.2 308.7-300.1 308.7-163.8 0-293.2-111.7-293.2-308.7s131.7-408.5 295.5-408.5c163.9 0 297.8 211.5 297.8 408.5z" fill="#FFC831"/><path d="M517.1 882.5C335.2 882.5 213 754.1 213 562.9c0-198 131-419.4 306.4-419.4 173.8 0 308.7 225.4 308.7 419.4 0 188.2-127.9 319.6-311 319.6z m2.3-717.1c-160.3 0-284.6 213.7-284.6 397.5 0 178.1 113.4 297.8 282.2 297.8 143.9 0 289.1-92.1 289.1-297.8 0.1-183.8-125.2-397.5-286.7-397.5z" fill="#7F0518"/><path d="M682.9 451.6m-60.2 0a60.2 60.2 0 1 0 120.4 0 60.2 60.2 0 1 0-120.4 0Z" fill="#7F0518"/><path d="M667.7 439.4m-27.7 0a27.7 27.7 0 1 0 55.4 0 27.7 27.7 0 1 0-55.4 0Z" fill="#FFFFFF"/><path d="M703.2 479.8m-12.6 0a12.6 12.6 0 1 0 25.2 0 12.6 12.6 0 1 0-25.2 0Z" fill="#FFFFFF"/><path d="M357.5 451.6m-60.2 0a60.2 60.2 0 1 0 120.4 0 60.2 60.2 0 1 0-120.4 0Z" fill="#7F0518"/><path d="M342.4 439.4m-27.7 0a27.7 27.7 0 1 0 55.4 0 27.7 27.7 0 1 0-55.4 0Z" fill="#FFFFFF"/><path d="M377.9 479.8m-12.6 0a12.6 12.6 0 1 0 25.2 0 12.6 12.6 0 1 0-25.2 0Z" fill="#FFFFFF"/><path d="M640 323.9c-2.4 0-4.9-0.8-6.9-2.4-4.7-3.8-5.4-10.7-1.6-15.4 0.7-0.8 16.4-19.8 41.5-21.6 17.1-1.1 34.1 5.6 50.2 20.5 4.4 4.1 4.7 11 0.7 15.4-4.1 4.5-11 4.8-15.5 0.6-11.5-10.6-23-15.6-33.8-14.8-15.6 1.1-26.1 13.5-26.2 13.6-2.1 2.7-5.3 4.1-8.4 4.1z" fill="#7F0518"/><path d="M327.3 323.9c-2.4 0-4.9-0.8-6.9-2.4-4.7-3.8-5.4-10.7-1.6-15.4 0.7-0.8 16.4-19.8 41.5-21.6 17.2-1.1 34.1 5.6 50.2 20.5 4.4 4.1 4.7 11 0.7 15.4-4.1 4.5-11 4.8-15.5 0.6-11.5-10.6-23.2-15.6-33.8-14.8-15.6 1.1-26.1 13.5-26.2 13.6-2.1 2.7-5.3 4.1-8.4 4.1z" fill="#7F0518"/><path d="M327.3 676.2a197.4 135.1 0 1 0 394.8 0 197.4 135.1 0 1 0-394.8 0Z" fill="#FFFFFF"/><path d="M524.7 822.2c-114.9 0-208.4-65.5-208.4-146s93.5-146 208.4-146 208.4 65.5 208.4 146-93.5 146-208.4 146z m0-270.2c-102.8 0-186.5 55.7-186.5 124.2s83.7 124.2 186.5 124.2 186.5-55.7 186.5-124.2S627.6 552 524.7 552z" fill="#7F0518"/><path d="M577 543.6c0 21.8-25.3 39.6-56.5 39.6S464 565.5 464 543.6c0-21.9 25.3-39.6 56.5-39.6s56.5 17.8 56.5 39.6z" fill="#7F0518"/><path d="M464.4 698.2c-3.9 0-7.7-0.4-11.6-1.1-35.3-6.6-53.2-41.8-53.9-43.3-2.7-5.4-0.5-11.9 4.9-14.6 5.3-2.7 12-0.5 14.7 4.9 0.1 0.3 13.9 27 38.5 31.6 16 3 33.6-3.9 52.6-20.2v-84.1c0-6 4.9-10.9 10.9-10.9s10.9 4.9 10.9 10.9v89.1c0 3.1-1.3 6-3.6 8.1-21.6 19.7-42.9 29.6-63.4 29.6z" fill="#7F0518"/><path d="M576.6 698.2c-20.5 0-41.7-10-63.5-29.7-4.5-4.1-4.8-11-0.7-15.4s11-4.8 15.4-0.7c20.5 18.7 39.6 26.5 56.3 23.3 24.4-4.6 38.2-31.3 38.4-31.5 2.7-5.4 9.3-7.6 14.7-4.9 5.4 2.7 7.6 9.2 4.9 14.7-0.7 1.5-18.6 36.6-53.9 43.3-3.8 0.6-7.7 0.9-11.6 0.9z" fill="#7F0518"/></symbol><symbol id="icon-zhifeiji" viewbox="0 0 1024 1024"><path d="M281.9 536.2L294 816.7l72.4-164z" fill="#5CCFEA"/><path d="M294 834.1c-1.1 0-2.1-0.1-3.2-0.3-7.9-1.5-13.8-8.3-14.2-16.4l-12.1-280.5c-0.3-7.7 4.4-14.7 11.7-17.2 7.2-2.5 15.3 0 19.8 6.2l84.4 116.5c3.6 5 4.3 11.6 1.8 17.2l-72.4 164c-2.7 6.5-9 10.5-15.8 10.5z m7.8-240.8l6.4 148.1 38.2-86.6-44.6-61.5z" fill="#4C4848"/><path d="M910.3 180.3L505.2 844.2 113.9 304.4z" fill="#80D4EE"/><path d="M505.2 861.6c-5.6 0-10.8-2.7-14.1-7.2L99.8 314.6c-3.6-4.9-4.3-11.3-2-16.9 2.3-5.6 7.4-9.6 13.4-10.5l796.3-124.1c6.8-1 13.4 1.9 17.2 7.5 3.8 5.6 3.9 12.9 0.4 18.7L520 853.3c-3 5-8.3 8.1-14.2 8.3h-0.6zM144.7 317.2l359.2 495.6 371.9-609.5-731.1 113.9z" fill="#4C4848"/><path d="M910.3 180.3L366.4 652.7l-84.5-116.5z" fill="#5CCFEA"/><path d="M366.4 670.1c-0.7 0-1.3 0-2-0.1-4.8-0.6-9.2-3.1-12.1-7.1l-84.4-116.5c-2.9-4-4-9.1-2.9-13.9 1.1-4.8 4.1-9 8.4-11.5l628.3-355.9c7.8-4.4 17.6-2.2 22.8 5.1 5.2 7.3 4 17.3-2.8 23.2L377.8 665.8c-3.2 2.8-7.3 4.3-11.4 4.3z m-59-128.4l61.9 85.3 398.4-346-460.3 260.7z" fill="#4C4848"/><path d="M408.6 711L297.1 811.4l69.3-158.7z" fill="#5CCFEA"/><path d="M297.1 828.8c-3.6 0-7.1-1.1-10.2-3.3-6.6-4.8-9-13.6-5.8-21.1l69.2-158.7c2.5-5.7 7.9-9.7 14.1-10.3 6.3-0.7 12.3 2 16 7.1l42.2 58.3c5.2 7.2 4.2 17.2-2.4 23.1L308.8 824.3c-3.3 3-7.5 4.5-11.7 4.5z m73-141.2l-24.9 57 40-36.1-15.1-20.9z" fill="#4C4848"/></symbol><symbol id="icon-tubiaozhizuomobanyihuifu-" viewbox="0 0 1024 1024"><path d="M701.6 196.53m-15 0a15 15 0 1 0 30 0 15 15 0 1 0-30 0Z" fill="#E159D3"/><path d="M956.29 310.21a482.39 482.39 0 1 0-847.9 452v120.36c0 71.4 58.42 130.76 129.82 130.1a127.79 127.79 0 0 0 100.44-49.85 120.4 120.4 0 0 0 21-103.43c-5.58-21.49-11.71-59-11.71-71.71S354 737.47 359.62 716a120.4 120.4 0 0 0-21-103.43 128.55 128.55 0 0 0-209.75 9.13c-20.91-64.82-25.25-135-11.25-205.6 28.7-144.71 172.14-286.19 317.16-313.27C690.37 55.1 914.24 250.88 914.24 498a402.4 402.4 0 0 1-19.36 123.71 128.55 128.55 0 0 0-209.74-9.13 120.4 120.4 0 0 0-21 103.43c5.58 21.49 11.71 59 11.71 71.71s-6.13 50.22-11.71 71.71a120.4 120.4 0 0 0 21 103.43 127.8 127.8 0 0 0 101.67 49.85 128.59 128.59 0 0 0 128.58-128.62V762.25a483 483 0 0 0 40.9-452z m-767.9 381.87c0-26.24 20.49-48.33 46.71-49.34a48.41 48.41 0 0 1 40.41 18.85 39.94 39.94 0 0 1 6.78 34.34c-5.84 22.48-14.29 68.12-14.29 91.85s8.45 69.37 14.29 91.85a39.94 39.94 0 0 1-6.78 34.37A48.38 48.38 0 0 1 237 932.86a48.64 48.64 0 0 1-48.64-48.64z m647 191.4c0 26.24-20.49 48.33-46.71 49.34a48.41 48.41 0 0 1-40.4-18.82 39.94 39.94 0 0 1-6.78-34.34c5.84-22.48 14.29-68.12 14.29-91.85s-8.45-69.37-14.29-91.85a39.94 39.94 0 0 1 6.78-34.34 48.41 48.41 0 0 1 40.41-18.85c26.22 1 46.71 23.1 46.71 49.34z" fill="#E159D3"/><path d="M651.51 154.09a371.39 371.39 0 0 0-419.35 100.28 373.69 373.69 0 0 0-30.07 39.56 15 15 0 1 0 25 16.52A341.48 341.48 0 0 1 512 157a339.17 339.17 0 0 1 128.23 24.93 15 15 0 1 0 11.29-27.79z" fill="#E159D3"/><path d="M456.91 668.17c-20.66 1.25-37.52 19.95-37.52 40.65v157.92c0 20.7 16.85 39.4 37.52 40.65a40 40 0 0 0 42.48-39.93V708.1a40 40 0 0 0-42.48-39.93zM563.91 698.12c-20.66 1.25-37.52 19.95-37.52 40.65v98c0 20.7 16.85 39.4 37.52 40.65a40 40 0 0 0 42.48-39.93V738a40 40 0 0 0-42.48-39.88z" fill="#48BCFF"/></symbol><symbol id="icon-lianjie" viewbox="0 0 1024 1024"><path d="M514.2 659.1c-44.8 42.1-84.6 85-127.6 126.7-46.3 45.6-120.6 45.6-167 0-22.7-23-34.9-54.3-33.7-86.6 1.2-32.3 15.6-62.6 39.9-83.9 41.6-42.5 84.2-83.7 125.8-125.8 10.5-7.1 17.1-18.6 18.1-31.3 1-12.6-3.9-25-13.2-33.6-9-8.2-21-12.4-33.2-11.5-12.2 0.8-23.5 6.6-31.3 16-44.8 44.8-89.5 86.8-131.2 131.2-46.9 47.1-67.7 114.2-55.9 179.6 11.9 65.4 55 120.9 115.4 148.5 69.8 34.8 153.8 22.6 210.8-30.4 50.6-44.8 97.1-94 143.7-142.8 8.9-11.1 12.8-25.3 10.7-39.4-3.4-15.3-15.3-27.3-30.6-30.9-15-3.7-30.9 1.9-40.7 14.2zM873.2 240.1c-28.2-71.4-96.5-119-173.2-120.9-47.3-4.1-94.3 10-131.6 39.4-53.7 48.3-104.3 99.8-154.4 151.7a39.953 39.953 0 0 0-7.5 42c5.8 14.3 19.4 23.9 34.8 24.7 14.2-0.5 27.8-6.2 38-16.1 44.8-44.8 89.5-89.5 134.3-130.7 27.2-25.4 66-34.3 101.6-23.3 41.2 10 73.6 41.6 84.8 82.4 11.2 40.9-0.7 84.6-31.1 114.1L637.8 534.6c-18.6 15.9-21 43.8-5.4 62.7 18.6 18.3 48.5 18.3 67.1 0 44.8-44.8 89.5-86.8 134.3-134.3 59.2-58.4 75-147.8 39.4-222.9z" fill="#3259CE"/><path d="M338.3 668c8 8.6 19.2 13.5 30.9 13.5s22.9-4.9 30.9-13.5c86.2-85.9 172-172.2 257.4-258.7 5.5-7 9.9-14.9 13-23.3 1.6-19-9-37-26.4-44.8-16.9-7.7-36.9-3.1-48.8 11.2L340.5 607.2c-9 7.4-14.4 18.3-14.8 29.9-0.4 11.6 4.2 22.9 12.6 30.9z" fill="#3259CE"/></symbol></svg>', function (t) { var a = (a = document.getElementsByTagName("script"))[a.length - 1], l = a.getAttribute("data-injectcss"), a = a.getAttribute("data-disable-injectsvg"); if (!a) { var F, h, p, c, i, d = function (a, l) { l.parentNode.insertBefore(a, l) }; if (l && !t.__iconfont__svg__cssinject__) { t.__iconfont__svg__cssinject__ = !0; try { document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>") } catch (a) { console && console.log(a) } } F = function () { var a, l = document.createElement("div"); l.innerHTML = t._iconfont_svg_string_3738452, (l = l.getElementsByTagName("svg")[0]) && (l.setAttribute("aria-hidden", "true"), l.style.position = "absolute", l.style.width = 0, l.style.height = 0, l.style.overflow = "hidden", l = l, (a = document.body).firstChild ? d(l, a.firstChild) : a.appendChild(l)) }, document.addEventListener ? ~["complete", "loaded", "interactive"].indexOf(document.readyState) ? setTimeout(F, 0) : (h = function () { document.removeEventListener("DOMContentLoaded", h, !1), F() }, document.addEventListener("DOMContentLoaded", h, !1)) : document.attachEvent && (p = F, c = t.document, i = !1, f(), c.onreadystatechange = function () { "complete" == c.readyState && (c.onreadystatechange = null, M()) }) } function M() { i || (i = !0, p()) } function f() { try { c.documentElement.doScroll("left") } catch (a) { return void setTimeout(f, 50) } M() } }(window);]]></content>
      
    </entry>
    
    
  
</search>
